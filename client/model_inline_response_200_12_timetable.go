/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse20012Timetable Timetable that specifies when a schedule triggers.
type InlineResponse20012Timetable struct {
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int32 `json:"per-hour"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int32 `json:"hours-of-day"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []string `json:"days-of-week"`
}

// NewInlineResponse20012Timetable instantiates a new InlineResponse20012Timetable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20012Timetable(perHour int32, hoursOfDay []int32, daysOfWeek []string) *InlineResponse20012Timetable {
	this := InlineResponse20012Timetable{}
	this.PerHour = perHour
	this.HoursOfDay = hoursOfDay
	this.DaysOfWeek = daysOfWeek
	return &this
}

// NewInlineResponse20012TimetableWithDefaults instantiates a new InlineResponse20012Timetable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20012TimetableWithDefaults() *InlineResponse20012Timetable {
	this := InlineResponse20012Timetable{}
	return &this
}

// GetPerHour returns the PerHour field value
func (o *InlineResponse20012Timetable) GetPerHour() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PerHour
}

// GetPerHourOk returns a tuple with the PerHour field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20012Timetable) GetPerHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerHour, true
}

// SetPerHour sets field value
func (o *InlineResponse20012Timetable) SetPerHour(v int32) {
	o.PerHour = v
}

// GetHoursOfDay returns the HoursOfDay field value
func (o *InlineResponse20012Timetable) GetHoursOfDay() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.HoursOfDay
}

// GetHoursOfDayOk returns a tuple with the HoursOfDay field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20012Timetable) GetHoursOfDayOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursOfDay, true
}

// SetHoursOfDay sets field value
func (o *InlineResponse20012Timetable) SetHoursOfDay(v []int32) {
	o.HoursOfDay = v
}

// GetDaysOfWeek returns the DaysOfWeek field value
func (o *InlineResponse20012Timetable) GetDaysOfWeek() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20012Timetable) GetDaysOfWeekOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaysOfWeek, true
}

// SetDaysOfWeek sets field value
func (o *InlineResponse20012Timetable) SetDaysOfWeek(v []string) {
	o.DaysOfWeek = v
}

func (o InlineResponse20012Timetable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["per-hour"] = o.PerHour
	}
	if true {
		toSerialize["hours-of-day"] = o.HoursOfDay
	}
	if true {
		toSerialize["days-of-week"] = o.DaysOfWeek
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20012Timetable struct {
	value *InlineResponse20012Timetable
	isSet bool
}

func (v NullableInlineResponse20012Timetable) Get() *InlineResponse20012Timetable {
	return v.value
}

func (v *NullableInlineResponse20012Timetable) Set(val *InlineResponse20012Timetable) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20012Timetable) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20012Timetable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20012Timetable(val *InlineResponse20012Timetable) *NullableInlineResponse20012Timetable {
	return &NullableInlineResponse20012Timetable{value: val, isSet: true}
}

func (v NullableInlineResponse20012Timetable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20012Timetable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
