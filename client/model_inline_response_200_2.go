/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse2002 struct for InlineResponse2002
type InlineResponse2002 struct {
	// The unique ID of the organization
	OrgId interface{} `json:"org_id,omitempty"`
	// The unique ID of the project
	ProjectId   interface{}                    `json:"project_id,omitempty"`
	ProjectData *InlineResponse2002ProjectData `json:"project_data,omitempty"`
	// A list of metrics and trends data for workflows for a given project.
	ProjectWorkflowData []InlineResponse2002ProjectWorkflowData `json:"project_workflow_data,omitempty"`
	// A list of metrics and trends data for branches for a given project.
	ProjectWorkflowBranchData []InlineResponse2002ProjectWorkflowBranchData `json:"project_workflow_branch_data,omitempty"`
	// A list of all the branches for a given project.
	AllBranches []string `json:"all_branches,omitempty"`
	// A list of all the workflows for a given project.
	AllWorkflows []string `json:"all_workflows,omitempty"`
}

// NewInlineResponse2002 instantiates a new InlineResponse2002 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2002() *InlineResponse2002 {
	this := InlineResponse2002{}
	return &this
}

// NewInlineResponse2002WithDefaults instantiates a new InlineResponse2002 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2002WithDefaults() *InlineResponse2002 {
	this := InlineResponse2002{}
	return &this
}

// GetOrgId returns the OrgId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineResponse2002) GetOrgId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse2002) GetOrgIdOk() (*interface{}, bool) {
	if o == nil || o.OrgId == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *InlineResponse2002) HasOrgId() bool {
	if o != nil && o.OrgId != nil {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given interface{} and assigns it to the OrgId field.
func (o *InlineResponse2002) SetOrgId(v interface{}) {
	o.OrgId = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineResponse2002) GetProjectId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse2002) GetProjectIdOk() (*interface{}, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *InlineResponse2002) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given interface{} and assigns it to the ProjectId field.
func (o *InlineResponse2002) SetProjectId(v interface{}) {
	o.ProjectId = v
}

// GetProjectData returns the ProjectData field value if set, zero value otherwise.
func (o *InlineResponse2002) GetProjectData() InlineResponse2002ProjectData {
	if o == nil || o.ProjectData == nil {
		var ret InlineResponse2002ProjectData
		return ret
	}
	return *o.ProjectData
}

// GetProjectDataOk returns a tuple with the ProjectData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetProjectDataOk() (*InlineResponse2002ProjectData, bool) {
	if o == nil || o.ProjectData == nil {
		return nil, false
	}
	return o.ProjectData, true
}

// HasProjectData returns a boolean if a field has been set.
func (o *InlineResponse2002) HasProjectData() bool {
	if o != nil && o.ProjectData != nil {
		return true
	}

	return false
}

// SetProjectData gets a reference to the given InlineResponse2002ProjectData and assigns it to the ProjectData field.
func (o *InlineResponse2002) SetProjectData(v InlineResponse2002ProjectData) {
	o.ProjectData = &v
}

// GetProjectWorkflowData returns the ProjectWorkflowData field value if set, zero value otherwise.
func (o *InlineResponse2002) GetProjectWorkflowData() []InlineResponse2002ProjectWorkflowData {
	if o == nil || o.ProjectWorkflowData == nil {
		var ret []InlineResponse2002ProjectWorkflowData
		return ret
	}
	return o.ProjectWorkflowData
}

// GetProjectWorkflowDataOk returns a tuple with the ProjectWorkflowData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetProjectWorkflowDataOk() ([]InlineResponse2002ProjectWorkflowData, bool) {
	if o == nil || o.ProjectWorkflowData == nil {
		return nil, false
	}
	return o.ProjectWorkflowData, true
}

// HasProjectWorkflowData returns a boolean if a field has been set.
func (o *InlineResponse2002) HasProjectWorkflowData() bool {
	if o != nil && o.ProjectWorkflowData != nil {
		return true
	}

	return false
}

// SetProjectWorkflowData gets a reference to the given []InlineResponse2002ProjectWorkflowData and assigns it to the ProjectWorkflowData field.
func (o *InlineResponse2002) SetProjectWorkflowData(v []InlineResponse2002ProjectWorkflowData) {
	o.ProjectWorkflowData = v
}

// GetProjectWorkflowBranchData returns the ProjectWorkflowBranchData field value if set, zero value otherwise.
func (o *InlineResponse2002) GetProjectWorkflowBranchData() []InlineResponse2002ProjectWorkflowBranchData {
	if o == nil || o.ProjectWorkflowBranchData == nil {
		var ret []InlineResponse2002ProjectWorkflowBranchData
		return ret
	}
	return o.ProjectWorkflowBranchData
}

// GetProjectWorkflowBranchDataOk returns a tuple with the ProjectWorkflowBranchData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetProjectWorkflowBranchDataOk() ([]InlineResponse2002ProjectWorkflowBranchData, bool) {
	if o == nil || o.ProjectWorkflowBranchData == nil {
		return nil, false
	}
	return o.ProjectWorkflowBranchData, true
}

// HasProjectWorkflowBranchData returns a boolean if a field has been set.
func (o *InlineResponse2002) HasProjectWorkflowBranchData() bool {
	if o != nil && o.ProjectWorkflowBranchData != nil {
		return true
	}

	return false
}

// SetProjectWorkflowBranchData gets a reference to the given []InlineResponse2002ProjectWorkflowBranchData and assigns it to the ProjectWorkflowBranchData field.
func (o *InlineResponse2002) SetProjectWorkflowBranchData(v []InlineResponse2002ProjectWorkflowBranchData) {
	o.ProjectWorkflowBranchData = v
}

// GetAllBranches returns the AllBranches field value if set, zero value otherwise.
func (o *InlineResponse2002) GetAllBranches() []string {
	if o == nil || o.AllBranches == nil {
		var ret []string
		return ret
	}
	return o.AllBranches
}

// GetAllBranchesOk returns a tuple with the AllBranches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetAllBranchesOk() ([]string, bool) {
	if o == nil || o.AllBranches == nil {
		return nil, false
	}
	return o.AllBranches, true
}

// HasAllBranches returns a boolean if a field has been set.
func (o *InlineResponse2002) HasAllBranches() bool {
	if o != nil && o.AllBranches != nil {
		return true
	}

	return false
}

// SetAllBranches gets a reference to the given []string and assigns it to the AllBranches field.
func (o *InlineResponse2002) SetAllBranches(v []string) {
	o.AllBranches = v
}

// GetAllWorkflows returns the AllWorkflows field value if set, zero value otherwise.
func (o *InlineResponse2002) GetAllWorkflows() []string {
	if o == nil || o.AllWorkflows == nil {
		var ret []string
		return ret
	}
	return o.AllWorkflows
}

// GetAllWorkflowsOk returns a tuple with the AllWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetAllWorkflowsOk() ([]string, bool) {
	if o == nil || o.AllWorkflows == nil {
		return nil, false
	}
	return o.AllWorkflows, true
}

// HasAllWorkflows returns a boolean if a field has been set.
func (o *InlineResponse2002) HasAllWorkflows() bool {
	if o != nil && o.AllWorkflows != nil {
		return true
	}

	return false
}

// SetAllWorkflows gets a reference to the given []string and assigns it to the AllWorkflows field.
func (o *InlineResponse2002) SetAllWorkflows(v []string) {
	o.AllWorkflows = v
}

func (o InlineResponse2002) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OrgId != nil {
		toSerialize["org_id"] = o.OrgId
	}
	if o.ProjectId != nil {
		toSerialize["project_id"] = o.ProjectId
	}
	if o.ProjectData != nil {
		toSerialize["project_data"] = o.ProjectData
	}
	if o.ProjectWorkflowData != nil {
		toSerialize["project_workflow_data"] = o.ProjectWorkflowData
	}
	if o.ProjectWorkflowBranchData != nil {
		toSerialize["project_workflow_branch_data"] = o.ProjectWorkflowBranchData
	}
	if o.AllBranches != nil {
		toSerialize["all_branches"] = o.AllBranches
	}
	if o.AllWorkflows != nil {
		toSerialize["all_workflows"] = o.AllWorkflows
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2002 struct {
	value *InlineResponse2002
	isSet bool
}

func (v NullableInlineResponse2002) Get() *InlineResponse2002 {
	return v.value
}

func (v *NullableInlineResponse2002) Set(val *InlineResponse2002) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2002) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2002) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2002(val *InlineResponse2002) *NullableInlineResponse2002 {
	return &NullableInlineResponse2002{value: val, isSet: true}
}

func (v NullableInlineResponse2002) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2002) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
