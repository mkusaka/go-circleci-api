/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineObject2 struct for InlineObject2
type InlineObject2 struct {
	// A pipeline continuation key.
	ContinuationKey string `json:"continuation-key"`
	// A configuration string for the pipeline.
	Configuration string `json:"configuration"`
	// An object containing pipeline parameters and their values.
	Parameters *map[string]string `json:"parameters,omitempty"`
}

// NewInlineObject2 instantiates a new InlineObject2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject2(continuationKey string, configuration string) *InlineObject2 {
	this := InlineObject2{}
	this.ContinuationKey = continuationKey
	this.Configuration = configuration
	return &this
}

// NewInlineObject2WithDefaults instantiates a new InlineObject2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject2WithDefaults() *InlineObject2 {
	this := InlineObject2{}
	return &this
}

// GetContinuationKey returns the ContinuationKey field value
func (o *InlineObject2) GetContinuationKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContinuationKey
}

// GetContinuationKeyOk returns a tuple with the ContinuationKey field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetContinuationKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContinuationKey, true
}

// SetContinuationKey sets field value
func (o *InlineObject2) SetContinuationKey(v string) {
	o.ContinuationKey = v
}

// GetConfiguration returns the Configuration field value
func (o *InlineObject2) GetConfiguration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *InlineObject2) SetConfiguration(v string) {
	o.Configuration = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *InlineObject2) GetParameters() map[string]string {
	if o == nil || o.Parameters == nil {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetParametersOk() (*map[string]string, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *InlineObject2) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *InlineObject2) SetParameters(v map[string]string) {
	o.Parameters = &v
}

func (o InlineObject2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["continuation-key"] = o.ContinuationKey
	}
	if true {
		toSerialize["configuration"] = o.Configuration
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject2 struct {
	value *InlineObject2
	isSet bool
}

func (v NullableInlineObject2) Get() *InlineObject2 {
	return v.value
}

func (v *NullableInlineObject2) Set(val *InlineObject2) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject2) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject2(val *InlineObject2) *NullableInlineObject2 {
	return &NullableInlineObject2{value: val, isSet: true}
}

func (v NullableInlineObject2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
