/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse2004 Summary metrics with trends for the entire org, and for each project.
type InlineResponse2004 struct {
	OrgData InlineResponse2004OrgData `json:"org_data"`
	// Metrics for a single project, across all branches
	OrgProjectData []InlineResponse2004OrgProjectData `json:"org_project_data"`
	// A list of all the project names in the organization.
	AllProjects []string `json:"all_projects"`
}

// NewInlineResponse2004 instantiates a new InlineResponse2004 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2004(orgData InlineResponse2004OrgData, orgProjectData []InlineResponse2004OrgProjectData, allProjects []string) *InlineResponse2004 {
	this := InlineResponse2004{}
	this.OrgData = orgData
	this.OrgProjectData = orgProjectData
	this.AllProjects = allProjects
	return &this
}

// NewInlineResponse2004WithDefaults instantiates a new InlineResponse2004 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2004WithDefaults() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// GetOrgData returns the OrgData field value
func (o *InlineResponse2004) GetOrgData() InlineResponse2004OrgData {
	if o == nil {
		var ret InlineResponse2004OrgData
		return ret
	}

	return o.OrgData
}

// GetOrgDataOk returns a tuple with the OrgData field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetOrgDataOk() (*InlineResponse2004OrgData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgData, true
}

// SetOrgData sets field value
func (o *InlineResponse2004) SetOrgData(v InlineResponse2004OrgData) {
	o.OrgData = v
}

// GetOrgProjectData returns the OrgProjectData field value
func (o *InlineResponse2004) GetOrgProjectData() []InlineResponse2004OrgProjectData {
	if o == nil {
		var ret []InlineResponse2004OrgProjectData
		return ret
	}

	return o.OrgProjectData
}

// GetOrgProjectDataOk returns a tuple with the OrgProjectData field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetOrgProjectDataOk() ([]InlineResponse2004OrgProjectData, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrgProjectData, true
}

// SetOrgProjectData sets field value
func (o *InlineResponse2004) SetOrgProjectData(v []InlineResponse2004OrgProjectData) {
	o.OrgProjectData = v
}

// GetAllProjects returns the AllProjects field value
func (o *InlineResponse2004) GetAllProjects() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllProjects
}

// GetAllProjectsOk returns a tuple with the AllProjects field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetAllProjectsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllProjects, true
}

// SetAllProjects sets field value
func (o *InlineResponse2004) SetAllProjects(v []string) {
	o.AllProjects = v
}

func (o InlineResponse2004) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["org_data"] = o.OrgData
	}
	if true {
		toSerialize["org_project_data"] = o.OrgProjectData
	}
	if true {
		toSerialize["all_projects"] = o.AllProjects
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2004 struct {
	value *InlineResponse2004
	isSet bool
}

func (v NullableInlineResponse2004) Get() *InlineResponse2004 {
	return v.value
}

func (v *NullableInlineResponse2004) Set(val *InlineResponse2004) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2004) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2004) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2004(val *InlineResponse2004) *NullableInlineResponse2004 {
	return &NullableInlineResponse2004{value: val, isSet: true}
}

func (v NullableInlineResponse2004) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2004) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
