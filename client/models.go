//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/go@4.0.0-preview.40)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package client

import "time"

// ArtifactListResponse
type ArtifactListResponse struct {
	// REQUIRED
	Items []*Paths1Ukw36CProjectSlugJobNumberArtifactsGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// CheckoutKey
type CheckoutKey struct {
	// REQUIRED; The date and time the checkout key was created.
	CreatedAt *time.Time `json:"created-at,omitempty"`

	// REQUIRED; An SSH key fingerprint.
	Fingerprint *string `json:"fingerprint,omitempty"`

	// REQUIRED; A boolean value that indicates if this key is preferred.
	Preferred *bool `json:"preferred,omitempty"`

	// REQUIRED; A public SSH key.
	PublicKey *string `json:"public-key,omitempty"`

	// REQUIRED; The type of checkout key. This may be either deploy-key or github-user-key.
	Type *Enum22 `json:"type,omitempty"`
}

// CheckoutKey0 - CheckoutKey
type CheckoutKey0 struct {
	// REQUIRED; The date and time the checkout key was created.
	CreatedAt *time.Time `json:"created-at,omitempty"`

	// REQUIRED; An SSH key fingerprint.
	Fingerprint *string `json:"fingerprint,omitempty"`

	// REQUIRED; A boolean value that indicates if this key is preferred.
	Preferred *bool `json:"preferred,omitempty"`

	// REQUIRED; A public SSH key.
	PublicKey *string `json:"public-key,omitempty"`

	// REQUIRED; The type of checkout key. This may be either deploy-key or github-user-key.
	Type *Enum23 `json:"type,omitempty"`
}

// CheckoutKeyInput
type CheckoutKeyInput struct {
	// REQUIRED; The type of checkout key to create. This may be either deploy-key or user-key.
	Type *PostContentSchemaType `json:"type,omitempty"`
}

// CheckoutKeyListResponse
type CheckoutKeyListResponse struct {
	// REQUIRED
	Items []*PathsDoiy03ProjectSlugCheckoutKeyGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// CircleciClientAddEnvironmentVariableToContextOptions contains the optional parameters for the CircleciClient.AddEnvironmentVariableToContext
// method.
type CircleciClientAddEnvironmentVariableToContextOptions struct {
	Body *PathsIdf99EContextIDEnvironmentVariableEnvVarNamePutRequestbodyContentApplicationJSONSchema
}

// CircleciClientApprovePendingApprovalJobByIDOptions contains the optional parameters for the CircleciClient.ApprovePendingApprovalJobByID
// method.
type CircleciClientApprovePendingApprovalJobByIDOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientCancelJobOptions contains the optional parameters for the CircleciClient.CancelJob method.
type CircleciClientCancelJobOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientCancelWorkflowOptions contains the optional parameters for the CircleciClient.CancelWorkflow method.
type CircleciClientCancelWorkflowOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientContinuePipelineOptions contains the optional parameters for the CircleciClient.ContinuePipeline method.
type CircleciClientContinuePipelineOptions struct {
	Body *Paths1GqnmklPipelineContinuePostRequestbodyContentApplicationJSONSchema
}

// CircleciClientCreateCheckoutKeyOptions contains the optional parameters for the CircleciClient.CreateCheckoutKey method.
type CircleciClientCreateCheckoutKeyOptions struct {
	Body *CheckoutKeyInput
}

// CircleciClientCreateContextOptions contains the optional parameters for the CircleciClient.CreateContext method.
type CircleciClientCreateContextOptions struct {
	Body *PathsQ3Ks49ContextPostRequestbodyContentApplicationJSONSchema
}

// CircleciClientCreateEnvVarOptions contains the optional parameters for the CircleciClient.CreateEnvVar method.
type CircleciClientCreateEnvVarOptions struct {
	Body *EnvironmentVariablePair0
}

// CircleciClientCreateScheduleOptions contains the optional parameters for the CircleciClient.CreateSchedule method.
type CircleciClientCreateScheduleOptions struct {
	Body *CreateScheduleParameters
}

// CircleciClientDeleteCheckoutKeyOptions contains the optional parameters for the CircleciClient.DeleteCheckoutKey method.
type CircleciClientDeleteCheckoutKeyOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientDeleteContextOptions contains the optional parameters for the CircleciClient.DeleteContext method.
type CircleciClientDeleteContextOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientDeleteEnvVarOptions contains the optional parameters for the CircleciClient.DeleteEnvVar method.
type CircleciClientDeleteEnvVarOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientDeleteEnvironmentVariableFromContextOptions contains the optional parameters for the CircleciClient.DeleteEnvironmentVariableFromContext
// method.
type CircleciClientDeleteEnvironmentVariableFromContextOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientDeleteScheduleByIDOptions contains the optional parameters for the CircleciClient.DeleteScheduleByID method.
type CircleciClientDeleteScheduleByIDOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetAllInsightsBranchesOptions contains the optional parameters for the CircleciClient.GetAllInsightsBranches
// method.
type CircleciClientGetAllInsightsBranchesOptions struct {
	// The name of a workflow. If not passed we will scope the API call to the project.
	WorkflowName *string
}

// CircleciClientGetCheckoutKeyOptions contains the optional parameters for the CircleciClient.GetCheckoutKey method.
type CircleciClientGetCheckoutKeyOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetCollaborationsOptions contains the optional parameters for the CircleciClient.GetCollaborations method.
type CircleciClientGetCollaborationsOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetContextOptions contains the optional parameters for the CircleciClient.GetContext method.
type CircleciClientGetContextOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetCurrentUserOptions contains the optional parameters for the CircleciClient.GetCurrentUser method.
type CircleciClientGetCurrentUserOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetEnvVarOptions contains the optional parameters for the CircleciClient.GetEnvVar method.
type CircleciClientGetEnvVarOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetFlakyTestsOptions contains the optional parameters for the CircleciClient.GetFlakyTests method.
type CircleciClientGetFlakyTestsOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetJobArtifactsOptions contains the optional parameters for the CircleciClient.GetJobArtifacts method.
type CircleciClientGetJobArtifactsOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetJobDetailsOptions contains the optional parameters for the CircleciClient.GetJobDetails method.
type CircleciClientGetJobDetailsOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetJobTimeseriesOptions contains the optional parameters for the CircleciClient.GetJobTimeseries method.
type CircleciClientGetJobTimeseriesOptions struct {
	// The name of a vcs branch. If not passed we will scope the API call to the default branch.
	Branch *string
	// Include only executions that started before this date. This date can be at most 90 days after the start-date.
	EndDate *time.Time
	// Include only executions that started at or after this date. This must be specified if an end-date is provided.
	StartDate *time.Time
	// The granularity for which to query timeseries data.
	TimeseriesGranularity *Enum5
}

// CircleciClientGetOrgSummaryDataOptions contains the optional parameters for the CircleciClient.GetOrgSummaryData method.
type CircleciClientGetOrgSummaryDataOptions struct {
	// List of project names.
	ProjectNames []string
	// The time window used to calculate summary metrics.
	ReportingWindow *Enum6
}

// CircleciClientGetPipelineByIDOptions contains the optional parameters for the CircleciClient.GetPipelineByID method.
type CircleciClientGetPipelineByIDOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetPipelineByNumberOptions contains the optional parameters for the CircleciClient.GetPipelineByNumber method.
type CircleciClientGetPipelineByNumberOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetPipelineConfigByIDOptions contains the optional parameters for the CircleciClient.GetPipelineConfigByID
// method.
type CircleciClientGetPipelineConfigByIDOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetProjectBySlugOptions contains the optional parameters for the CircleciClient.GetProjectBySlug method.
type CircleciClientGetProjectBySlugOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetProjectJobRunsOptions contains the optional parameters for the CircleciClient.GetProjectJobRuns method.
type CircleciClientGetProjectJobRunsOptions struct {
	// The name of a vcs branch. If not passed we will scope the API call to the default branch. Note - Querying all branches
	// is not supported yet.
	Branch *string
	// Include only executions that started before this date. This date can be at most 90 days after the start-date.
	EndDate *time.Time
	// A token to retrieve the next page of results.
	PageToken *string
	// Include only executions that started at or after this date. This must be specified if an end-date is provided.
	StartDate *time.Time
}

// CircleciClientGetProjectWorkflowJobMetricsOptions contains the optional parameters for the CircleciClient.GetProjectWorkflowJobMetrics
// method.
type CircleciClientGetProjectWorkflowJobMetricsOptions struct {
	// Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
	AllBranches *bool
	// The name of a vcs branch. If not passed we will scope the API call to the default branch.
	Branch *string
	// A token to retrieve the next page of results.
	PageToken *string
	// The time window used to calculate summary metrics.
	ReportingWindow *Enum9
}

// CircleciClientGetProjectWorkflowMetricsOptions contains the optional parameters for the CircleciClient.GetProjectWorkflowMetrics
// method.
type CircleciClientGetProjectWorkflowMetricsOptions struct {
	// Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
	AllBranches *bool
	// The name of a vcs branch. If not passed we will scope the API call to the default branch.
	Branch *string
	// A token to retrieve the next page of results.
	PageToken *string
	// The time window used to calculate summary metrics.
	ReportingWindow *Enum7
}

// CircleciClientGetProjectWorkflowRunsOptions contains the optional parameters for the CircleciClient.GetProjectWorkflowRuns
// method.
type CircleciClientGetProjectWorkflowRunsOptions struct {
	// Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
	AllBranches *bool
	// The name of a vcs branch. If not passed we will scope the API call to the default branch.
	Branch *string
	// Include only executions that started before this date. This date can be at most 90 days after the start-date.
	EndDate *time.Time
	// A token to retrieve the next page of results.
	PageToken *string
	// Include only executions that started at or after this date. This must be specified if an end-date is provided.
	StartDate *time.Time
}

// CircleciClientGetProjectWorkflowTestMetricsOptions contains the optional parameters for the CircleciClient.GetProjectWorkflowTestMetrics
// method.
type CircleciClientGetProjectWorkflowTestMetricsOptions struct {
	// Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
	AllBranches *bool
	// The name of a vcs branch. If not passed we will scope the API call to the default branch.
	Branch *string
}

// CircleciClientGetProjectWorkflowsPageDataOptions contains the optional parameters for the CircleciClient.GetProjectWorkflowsPageData
// method.
type CircleciClientGetProjectWorkflowsPageDataOptions struct {
	// The names of VCS branches to include in branch-level workflow metrics.
	Branches []string
	// The time window used to calculate summary metrics.
	ReportingWindow *Enum3
	// The names of workflows to include in workflow-level metrics.
	WorkflowNames []string
}

// CircleciClientGetScheduleByIDOptions contains the optional parameters for the CircleciClient.GetScheduleByID method.
type CircleciClientGetScheduleByIDOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetTestsOptions contains the optional parameters for the CircleciClient.GetTests method.
type CircleciClientGetTestsOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetUserOptions contains the optional parameters for the CircleciClient.GetUser method.
type CircleciClientGetUserOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetWorkflowByIDOptions contains the optional parameters for the CircleciClient.GetWorkflowByID method.
type CircleciClientGetWorkflowByIDOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientGetWorkflowSummaryOptions contains the optional parameters for the CircleciClient.GetWorkflowSummary method.
type CircleciClientGetWorkflowSummaryOptions struct {
	// Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
	AllBranches *bool
	// The names of VCS branches to include in branch-level workflow metrics.
	Branches []string
}

// CircleciClientGetWorkflowTimeseriesOptions contains the optional parameters for the CircleciClient.GetWorkflowTimeseries
// method.
type CircleciClientGetWorkflowTimeseriesOptions struct {
	// Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
	AllBranches *bool
	// The name of a vcs branch. If not passed we will scope the API call to the default branch.
	Branch *string
	// Include only executions that started before this date. This date can be at most 90 days after the start-date.
	EndDate *time.Time
	// Include only executions that started at or after this date. This must be specified if an end-date is provided.
	StartDate *time.Time
	// The granularity for which to query timeseries data.
	TimeseriesGranularity *Enum4
	// The name of a workflow. If not passed we will scope the API call to the project.
	WorkflowName *string
}

// CircleciClientListCheckoutKeysOptions contains the optional parameters for the CircleciClient.ListCheckoutKeys method.
type CircleciClientListCheckoutKeysOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientListContextsOptions contains the optional parameters for the CircleciClient.ListContexts method.
type CircleciClientListContextsOptions struct {
	// The unique ID of the owner of the context. Specify either this or owner-slug.
	OwnerID *string
	// A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.
	OwnerSlug *string
	// The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
	OwnerType *Enum2
	// A token to retrieve the next page of results.
	PageToken *string
}

// CircleciClientListEnvVarsOptions contains the optional parameters for the CircleciClient.ListEnvVars method.
type CircleciClientListEnvVarsOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientListEnvironmentVariablesFromContextOptions contains the optional parameters for the CircleciClient.ListEnvironmentVariablesFromContext
// method.
type CircleciClientListEnvironmentVariablesFromContextOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientListMyPipelinesOptions contains the optional parameters for the CircleciClient.ListMyPipelines method.
type CircleciClientListMyPipelinesOptions struct {
	// A token to retrieve the next page of results.
	PageToken *string
}

// CircleciClientListPipelinesForProjectOptions contains the optional parameters for the CircleciClient.ListPipelinesForProject
// method.
type CircleciClientListPipelinesForProjectOptions struct {
	// The name of a vcs branch.
	Branch *string
	// A token to retrieve the next page of results.
	PageToken *string
}

// CircleciClientListPipelinesOptions contains the optional parameters for the CircleciClient.ListPipelines method.
type CircleciClientListPipelinesOptions struct {
	// Only include entries created by your user.
	Mine *bool
	// Org slug in the form vcs-slug/org-name
	OrgSlug *string
	// A token to retrieve the next page of results.
	PageToken *string
}

// CircleciClientListSchedulesForProjectOptions contains the optional parameters for the CircleciClient.ListSchedulesForProject
// method.
type CircleciClientListSchedulesForProjectOptions struct {
	// A token to retrieve the next page of results.
	PageToken *string
}

// CircleciClientListWorkflowJobsOptions contains the optional parameters for the CircleciClient.ListWorkflowJobs method.
type CircleciClientListWorkflowJobsOptions struct {
	// placeholder for future optional parameters
}

// CircleciClientListWorkflowsByPipelineIDOptions contains the optional parameters for the CircleciClient.ListWorkflowsByPipelineID
// method.
type CircleciClientListWorkflowsByPipelineIDOptions struct {
	// A token to retrieve the next page of results.
	PageToken *string
}

// CircleciClientRerunWorkflowOptions contains the optional parameters for the CircleciClient.RerunWorkflow method.
type CircleciClientRerunWorkflowOptions struct {
	Body *RerunWorkflowParameters
}

// CircleciClientTriggerPipelineOptions contains the optional parameters for the CircleciClient.TriggerPipeline method.
type CircleciClientTriggerPipelineOptions struct {
	Body *TriggerPipelineParameters
}

// CircleciClientUpdateScheduleOptions contains the optional parameters for the CircleciClient.UpdateSchedule method.
type CircleciClientUpdateScheduleOptions struct {
	Body *UpdateScheduleParameters
}

// Context
type Context struct {
	// REQUIRED; The date and time the context was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique ID of the context.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The user defined name of the context.
	Name *string `json:"name,omitempty"`
}

// Context0 - Context
type Context0 struct {
	// REQUIRED; The date and time the context was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique ID of the context.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The user defined name of the context.
	Name *string `json:"name,omitempty"`
}

// CreateScheduleParameters - The parameters for a create schedule request
type CreateScheduleParameters struct {
	// REQUIRED; The attribution-actor of the scheduled pipeline.
	AttributionActor *PostContentSchemaAttributionActor `json:"attribution-actor,omitempty"`

	// REQUIRED; Name of the schedule.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]*Paths19Eet6RProjectSlugSchedulePostRequestbodyContentApplicationJSONSchemaPropertiesParametersAdditionalproperties `json:"parameters,omitempty"`

	// REQUIRED; Timetable that specifies when a schedule triggers.
	Timetable *PostContentSchemaTimetable `json:"timetable,omitempty"`

	// Description of the schedule.
	Description *string `json:"description,omitempty"`
}

// EnvironmentVariableListResponse
type EnvironmentVariableListResponse struct {
	// REQUIRED
	Items []*Paths1UfjskrProjectSlugEnvvarGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// EnvironmentVariablePair
type EnvironmentVariablePair struct {
	// REQUIRED; The name of the environment variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the environment variable.
	Value *string `json:"value,omitempty"`
}

// EnvironmentVariablePair0 - EnvironmentVariablePair
type EnvironmentVariablePair0 struct {
	// REQUIRED; The name of the environment variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the environment variable.
	Value *string `json:"value,omitempty"`
}

// EnvironmentVariablePair1 - EnvironmentVariablePair
type EnvironmentVariablePair1 struct {
	// REQUIRED; The name of the environment variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the environment variable.
	Value *string `json:"value,omitempty"`
}

// Get200ApplicationJSONItemsItem - Collaboration
type Get200ApplicationJSONItemsItem struct {
	// REQUIRED; URL to the user's avatar on the VCS
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED; The UUID of the organization
	ID *string `json:"id,omitempty"`

	// REQUIRED; The name of the organization
	Name *string `json:"name,omitempty"`

	// REQUIRED; The slug of the organization
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; The VCS provider
	VcsType *string `json:"vcs-type,omitempty"`
}

// Get200ApplicationJSONProperties - Metrics aggregated across all workflows and branches for a project.
type Get200ApplicationJSONProperties struct {
	// REQUIRED
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The total credits consumed over the current timeseries interval.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; Total duration, in seconds.
	TotalDurationSecs *int64 `json:"total_duration_secs,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

// Get200ApplicationJSONPropertiesItemsErrorsItem - An error with a type and message.
type Get200ApplicationJSONPropertiesItemsErrorsItem struct {
	// REQUIRED; A human-readable error message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The type of error.
	Type *GetResponses200ContentApplicationJSONSchemaItemErrorsItemType `json:"type,omitempty"`
}

// Get200ApplicationJSONPropertiesItemsItem - Context
type Get200ApplicationJSONPropertiesItemsItem struct {
	// REQUIRED; The date and time the context was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique ID of the context.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The user defined name of the context.
	Name *string `json:"name,omitempty"`
}

// Get200ApplicationJSONPropertiesItemsMetricsDurationMetrics - Metrics relating to the duration of runs for a workflow.
type Get200ApplicationJSONPropertiesItemsMetricsDurationMetrics struct {
	// REQUIRED; The max duration, in seconds, among a group of runs.
	Max *int64 `json:"max,omitempty"`

	// REQUIRED; The median duration, in seconds, among a group of runs.
	Median *int64 `json:"median,omitempty"`

	// REQUIRED; The minimum duration, in seconds, among a group of runs.
	Min *int64 `json:"min,omitempty"`

	// REQUIRED; The 95th percentile duration, in seconds, among a group of runs.
	P95 *int64 `json:"p95,omitempty"`

	// REQUIRED; The total duration, in seconds, added across a group of runs.
	Total *int64 `json:"total,omitempty"`
}

// Get200ApplicationJSONPropertiesItemsTriggerActor - The user who triggered the Pipeline.
type Get200ApplicationJSONPropertiesItemsTriggerActor struct {
	// REQUIRED; URL to the user's avatar on the VCS
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`
}

// Get200ApplicationJSONPropertiesItemsVcsCommit - The latest commit in the pipeline.
type Get200ApplicationJSONPropertiesItemsVcsCommit struct {
	// REQUIRED; The body of the commit message.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The subject of the commit message.
	Subject *string `json:"subject,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaItemActor - The attribution actor who will run the scheduled pipeline.
type GetResponses200ContentApplicationJSONSchemaItemActor struct {
	// REQUIRED; The unique ID of the user.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`

	// REQUIRED; The name of the user.
	Name *string `json:"name,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaItemMetrics - Metrics relating to a workflow's runs.
type GetResponses200ContentApplicationJSONSchemaItemMetrics struct {
	// REQUIRED; Metrics relating to the duration of runs for a workflow.
	DurationMetrics *Get200ApplicationJSONPropertiesItemsMetricsDurationMetrics `json:"duration_metrics,omitempty"`

	// REQUIRED; The number of failed runs.
	FailedRuns *int64 `json:"failed_runs,omitempty"`

	// REQUIRED; The median credits consumed over the current timeseries interval.
	MedianCreditsUsed *int64 `json:"median_credits_used,omitempty"`

	// REQUIRED; The number of successful runs.
	SuccessfulRuns *int64 `json:"successful_runs,omitempty"`

	// REQUIRED; The average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The total credits consumed over the current timeseries interval.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaItemTimetable - Timetable that specifies when a schedule triggers.
type GetResponses200ContentApplicationJSONSchemaItemTimetable struct {
	// REQUIRED; Days in a week in which the schedule triggers.
	DaysOfWeek []*Get200ApplicationJSONPropertiesItemsTimetableDaysOfWeekItem `json:"days-of-week,omitempty"`

	// REQUIRED; Hours in a day in which the schedule triggers.
	HoursOfDay []*int32 `json:"hours-of-day,omitempty"`

	// REQUIRED; Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour *int32 `json:"per-hour,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaItemTrigger - A summary of the trigger.
type GetResponses200ContentApplicationJSONSchemaItemTrigger struct {
	// REQUIRED; The user who triggered the Pipeline.
	Actor *Get200ApplicationJSONPropertiesItemsTriggerActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the trigger was received.
	ReceivedAt *time.Time `json:"received_at,omitempty"`

	// REQUIRED; The type of trigger.
	Type *Get200ApplicationJSONPropertiesItemsTriggerType `json:"type,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaItemVcs - VCS information for the pipeline.
type GetResponses200ContentApplicationJSONSchemaItemVcs struct {
	// REQUIRED; URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For
	// other pipelines the origin_ and target_repository_urls will be the same.
	OriginRepositoryURL *string `json:"origin_repository_url,omitempty"`

	// REQUIRED; Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName *string `json:"provider_name,omitempty"`

	// REQUIRED; The code revision the pipeline ran.
	Revision *string `json:"revision,omitempty"`

	// REQUIRED; URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines,
	// this is the URL to the parent repo. For other pipelines, the origin_ and
	// target_repository_urls will be the same.
	TargetRepositoryURL *string `json:"target_repository_url,omitempty"`

	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that branch and tag are
	// mutually exclusive. To trigger a pipeline for a PR by number use
	// pull/<number>/head for the PR ref or pull/<number>/merge for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`

	// The latest commit in the pipeline.
	Commit *Get200ApplicationJSONPropertiesItemsVcsCommit `json:"commit,omitempty"`

	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`

	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`

	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that branch and tag are
	// mutually exclusive.
	Tag *string `json:"tag,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaOrgProjectDataItemMetrics - Metrics for a single project, across all branches.
type GetResponses200ContentApplicationJSONSchemaOrgProjectDataItemMetrics struct {
	// REQUIRED
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The total credits consumed over the current timeseries interval.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; Total duration, in seconds.
	TotalDurationSecs *int64 `json:"total_duration_secs,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaOrgProjectDataItemTrends - Trends for a single project, across all branches.
type GetResponses200ContentApplicationJSONSchemaOrgProjectDataItemTrends struct {
	// REQUIRED; The trend value for the success rate.
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The trend value for total credits consumed.
	TotalCreditsUsed *float32 `json:"total_credits_used,omitempty"`

	// REQUIRED; Trend value for total duration.
	TotalDurationSecs *float32 `json:"total_duration_secs,omitempty"`

	// REQUIRED; The trend value for total number of runs.
	TotalRuns *float32 `json:"total_runs,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaProjectWorkflowBranchDataItemMetrics - Metrics aggregated across a workflow
// or branchfor a project.
type GetResponses200ContentApplicationJSONSchemaProjectWorkflowBranchDataItemMetrics struct {
	// REQUIRED; The 95th percentile duration among a group of workflow runs.
	P95DurationSecs *float32 `json:"p95_duration_secs,omitempty"`

	// REQUIRED
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The total credits consumed over the current timeseries interval.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaProjectWorkflowBranchDataItemTrends - Trends aggregated across a workflow or
// branch for a project.
type GetResponses200ContentApplicationJSONSchemaProjectWorkflowBranchDataItemTrends struct {
	// REQUIRED; The 95th percentile duration among a group of workflow runs.
	P95DurationSecs *float32 `json:"p95_duration_secs,omitempty"`

	// REQUIRED; The trend value for the success rate.
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The trend value for total credits consumed.
	TotalCreditsUsed *float32 `json:"total_credits_used,omitempty"`

	// REQUIRED; The trend value for total number of runs.
	TotalRuns *float32 `json:"total_runs,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaProjectWorkflowDataItemMetrics - Metrics aggregated across a workflow or branchfor
// a project.
type GetResponses200ContentApplicationJSONSchemaProjectWorkflowDataItemMetrics struct {
	// REQUIRED; The 95th percentile duration among a group of workflow runs.
	P95DurationSecs *float32 `json:"p95_duration_secs,omitempty"`

	// REQUIRED
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The total credits consumed over the current timeseries interval.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaProjectWorkflowDataItemTrends - Trends aggregated across a workflow or branch
// for a project.
type GetResponses200ContentApplicationJSONSchemaProjectWorkflowDataItemTrends struct {
	// REQUIRED; The 95th percentile duration among a group of workflow runs.
	P95DurationSecs *float32 `json:"p95_duration_secs,omitempty"`

	// REQUIRED; The trend value for the success rate.
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The trend value for total credits consumed.
	TotalCreditsUsed *float32 `json:"total_credits_used,omitempty"`

	// REQUIRED; The trend value for total number of runs.
	TotalRuns *float32 `json:"total_runs,omitempty"`
}

// GetResponses200ContentApplicationJSONSchemaTestRunsItemTestCounts - Test counts for a given pipeline number
type GetResponses200ContentApplicationJSONSchemaTestRunsItemTestCounts struct {
	// REQUIRED; The number of tests with the error status
	Error *int64 `json:"error,omitempty"`

	// REQUIRED; The number of tests with the failure status
	Failure *int64 `json:"failure,omitempty"`

	// REQUIRED; The number of tests with the skipped status
	Skipped *int64 `json:"skipped,omitempty"`

	// REQUIRED; The number of tests with the success status
	Success *int64 `json:"success,omitempty"`

	// REQUIRED; The total number of tests
	Total *int64 `json:"total,omitempty"`
}

// JobDetails - Job Details
type JobDetails struct {
	// REQUIRED; List of contexts used by the job.
	Contexts []*Paths163ThgaProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesContextsItems `json:"contexts,omitempty"`

	// REQUIRED; The time when the job was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Duration of a job in milliseconds.
	Duration *int64 `json:"duration,omitempty"`

	// REQUIRED; Information about executor used for a job.
	Executor *PathsSokv8NProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesExecutor `json:"executor,omitempty"`

	// REQUIRED; Info about the latest workflow the job was a part of.
	LatestWorkflow *Paths17Zq46YProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesLatestWorkflow `json:"latest_workflow,omitempty"`

	// REQUIRED; Messages from CircleCI execution platform.
	Messages []*Paths1Stc8H4ProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesMessagesItems `json:"messages,omitempty"`

	// REQUIRED; The name of the job.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The number of the job.
	Number *int64 `json:"number,omitempty"`

	// REQUIRED; Information about an organization.
	Organization *Paths1Ol1MfwProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesOrganization `json:"organization,omitempty"`

	// REQUIRED; Info about parallels runs and their status.
	ParallelRuns []*Paths51W5KiProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesParallelRunsItems `json:"parallel_runs,omitempty"`

	// REQUIRED; A number of parallel runs the job has.
	Parallelism *int64 `json:"parallelism,omitempty"`

	// REQUIRED; Info about a pipeline the job is a part of.
	Pipeline *PathsVl5U0EProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesPipeline `json:"pipeline,omitempty"`

	// REQUIRED; Information about a project.
	Project *PathsKbfb5WProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesProject `json:"project,omitempty"`

	// REQUIRED; The time when the job was placed in a queue.
	QueuedAt *time.Time `json:"queued_at,omitempty"`

	// REQUIRED; The date and time the job started.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED; The current status of the job.
	Status interface{} `json:"status,omitempty"`

	// REQUIRED; URL of the job in CircleCI Web UI.
	WebURL *string `json:"web_url,omitempty"`

	// The time when the job stopped.
	StoppedAt *time.Time `json:"stopped_at,omitempty"`
}

// MessageResponse - message response
type MessageResponse struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse0 - message response
type MessageResponse0 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse1 - message response
type MessageResponse1 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse2 - message response
type MessageResponse2 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse3 - message response
type MessageResponse3 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse4 - message response
type MessageResponse4 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse5 - message response
type MessageResponse5 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse6 - message response
type MessageResponse6 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse7 - message response
type MessageResponse7 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// MessageResponse8 - message response
type MessageResponse8 struct {
	// REQUIRED; A human-readable message
	Message *string `json:"message,omitempty"`
}

// PatchContentSchemaTimetable - Timetable that specifies when a schedule triggers.
type PatchContentSchemaTimetable struct {
	// Days in a week in which the schedule triggers.
	DaysOfWeek []*PatchContentSchemaTimetableDaysOfWeekItem `json:"days-of-week,omitempty"`

	// Hours in a day in which the schedule triggers.
	HoursOfDay []*int32 `json:"hours-of-day,omitempty"`

	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour *int32 `json:"per-hour,omitempty"`
}

// Paths101Hun1ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTrigger - A summary of the trigger.
type Paths101Hun1ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTrigger struct {
	// REQUIRED; The user who triggered the Pipeline.
	Actor *Paths1Y6Jy0UProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTriggerPropertiesActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the trigger was received.
	ReceivedAt *time.Time `json:"received_at,omitempty"`

	// REQUIRED; The type of trigger.
	Type *Enum33 `json:"type,omitempty"`
}

type Paths10AxigyProjectSlugEnvvarNameDeleteResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths10Gic9UInsightsProjectSlugFlakyTestsGetResponses200ContentApplicationJSONSchemaPropertiesFlakyTestsItems struct {
	// REQUIRED; The class the test belongs to.
	Classname *string `json:"classname,omitempty"`

	// REQUIRED; The file the test belongs to.
	File *string `json:"file,omitempty"`

	// REQUIRED; The name of the job.
	JobName *string `json:"job-name,omitempty"`

	// REQUIRED; The number of the job.
	JobNumber interface{} `json:"job-number,omitempty"`

	// REQUIRED; The number of the pipeline.
	PipelineNumber interface{} `json:"pipeline-number,omitempty"`

	// REQUIRED; The source of the test.
	Source *string `json:"source,omitempty"`

	// REQUIRED; The name of the test.
	TestName *string `json:"test-name,omitempty"`

	// REQUIRED; The number of times the test flaked.
	TimesFlaked *int64 `json:"times-flaked,omitempty"`

	// REQUIRED; The date and time when workflow was created.
	WorkflowCreatedAt interface{} `json:"workflow-created-at,omitempty"`

	// REQUIRED; The ID of the workflow associated with the provided test counts
	WorkflowID interface{} `json:"workflow-id,omitempty"`

	// REQUIRED; The name of the workflow.
	WorkflowName *string `json:"workflow-name,omitempty"`

	// Anything
	TimeWasted interface{} `json:"time-wasted,omitempty"`
}

// Paths10T0NvuInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetricsPropertiesDurationMetrics
// - Metrics relating to the duration of runs for a workflow.
type Paths10T0NvuInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetricsPropertiesDurationMetrics struct {
	// REQUIRED; The max duration, in seconds, among a group of runs.
	Max *int64 `json:"max,omitempty"`

	// REQUIRED; The mean duration, in seconds, among a group of runs.
	Mean *int64 `json:"mean,omitempty"`

	// REQUIRED; The median duration, in seconds, among a group of runs.
	Median *int64 `json:"median,omitempty"`

	// REQUIRED; The minimum duration, in seconds, among a group of runs.
	Min *int64 `json:"min,omitempty"`

	// REQUIRED; The 95th percentile duration, in seconds, among a group of runs.
	P95 *int64 `json:"p95,omitempty"`

	// REQUIRED; The standard deviation, in seconds, among a group of runs.
	StandardDeviation *float32 `json:"standard_deviation,omitempty"`
}

type Paths126K3HiInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectWorkflowBranchDataItems struct {
	// REQUIRED; The VCS branch of a workflow's trigger.
	Branch *string `json:"branch,omitempty"`

	// REQUIRED; Metrics aggregated across a workflow or branchfor a project.
	Metrics *GetResponses200ContentApplicationJSONSchemaProjectWorkflowBranchDataItemMetrics `json:"metrics,omitempty"`

	// REQUIRED; Trends aggregated across a workflow or branch for a project.
	Trends *GetResponses200ContentApplicationJSONSchemaProjectWorkflowBranchDataItemTrends `json:"trends,omitempty"`

	// REQUIRED; The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`
}

// Paths12Ido9RInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectDataPropertiesTrends
// - Metric trends aggregated across all workflows and branches for a project.
type Paths12Ido9RInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectDataPropertiesTrends struct {
	// REQUIRED; The trend value for the success rate.
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; Trend value for the average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The trend value for total credits consumed.
	TotalCreditsUsed *float32 `json:"total_credits_used,omitempty"`

	// REQUIRED; Trend value for total duration.
	TotalDurationSecs *float32 `json:"total_duration_secs,omitempty"`

	// REQUIRED; The trend value for total number of runs.
	TotalRuns *float32 `json:"total_runs,omitempty"`
}

type Paths1345LpfInsightsProjectSlugFlakyTestsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths136Or3PWorkflowIDJobGetResponses200ContentApplicationJSONSchemaPropertiesItems - Job
type Paths136Or3PWorkflowIDJobGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; A sequence of the unique job IDs for the jobs that this job depends upon in the workflow.
	Dependencies []*string `json:"dependencies,omitempty"`

	// REQUIRED; The unique ID of the job.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The name of the job.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The project-slug for the job.
	ProjectSlug *string `json:"project_slug,omitempty"`

	// REQUIRED; The date and time the job started.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED; The current status of the job.
	Status interface{} `json:"status,omitempty"`

	// REQUIRED; The type of job.
	Type *Enum44 `json:"type,omitempty"`

	// The unique ID of the job.
	ApprovalRequestID *string `json:"approval_request_id,omitempty"`

	// The unique ID of the user.
	ApprovedBy *string `json:"approved_by,omitempty"`

	// The unique ID of the user.
	CanceledBy *string `json:"canceled_by,omitempty"`

	// The number of the job.
	JobNumber *int64 `json:"job_number,omitempty"`

	// The time when the job stopped.
	StoppedAt *time.Time `json:"stopped_at,omitempty"`
}

// Paths163ThgaProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesContextsItems - Information about
// the context.
type Paths163ThgaProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesContextsItems struct {
	// REQUIRED; The name of the context.
	Name *string `json:"name,omitempty"`
}

// Paths170Uh0XProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger - A summary
// of the trigger.
type Paths170Uh0XProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger struct {
	// REQUIRED; The user who triggered the Pipeline.
	Actor *Paths1NlpgwyProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerPropertiesActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the trigger was received.
	ReceivedAt *time.Time `json:"received_at,omitempty"`

	// REQUIRED; The type of trigger.
	Type *Enum30 `json:"type,omitempty"`
}

type Paths17Cr4XmProjectSlugEnvvarPostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths17M2P6JProjectSlugGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths17RgnldWorkflowIDApproveApprovalRequestIDPostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths17Ss7PbInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchema - Project level
// test metrics response
type Paths17Ss7PbInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; The average number of tests executed per run
	AverageTestCount *int64 `json:"average_test_count,omitempty"`

	// REQUIRED; Metrics for the most frequently failing tests
	MostFailedTests []*Paths1LzqphiInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchemaPropertiesMostFailedTestsItems `json:"most_failed_tests,omitempty"`

	// REQUIRED; The number of tests with the same success rate being omitted from mostfailedtests
	MostFailedTestsExtra *int64 `json:"most_failed_tests_extra,omitempty"`

	// REQUIRED; Metrics for the slowest running tests
	SlowestTests []*PathsJq0ZbwInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchemaPropertiesSlowestTestsItems `json:"slowest_tests,omitempty"`

	// REQUIRED; The number of tests with the same duration rate being omitted from slowest_tests
	SlowestTestsExtra *int64 `json:"slowest_tests_extra,omitempty"`

	// REQUIRED; Test counts grouped by pipeline number and workflow id
	TestRuns []*Paths9Yc60XInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchemaPropertiesTestRunsItems `json:"test_runs,omitempty"`

	// REQUIRED; The total number of test runs
	TotalTestRuns *int64 `json:"total_test_runs,omitempty"`
}

// Paths17Zq46YProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesLatestWorkflow - Info about the latest
// workflow the job was a part of.
type Paths17Zq46YProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesLatestWorkflow struct {
	// REQUIRED; The unique ID of the workflow.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The name of the workflow.
	Name *string `json:"name,omitempty"`
}

type Paths1802ZvtContextIDEnvironmentVariableEnvVarNameDeleteResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths18CtswjScheduleIDPatchResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths18T4JesProjectSlugCheckoutKeyPostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths18Xv58BPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTriggerParametersAdditionalproperties struct {
}

type Paths19974V0ScheduleIDPatchRequestbodyContentApplicationJSONSchemaPropertiesParametersAdditionalproperties struct {
}

type Paths19Eet6RProjectSlugSchedulePostRequestbodyContentApplicationJSONSchemaPropertiesParametersAdditionalproperties struct {
}

type Paths1A7Qu4RInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1Bjh56GProjectSlugPipelineNumberGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1Cbkx8TPipelineContinuePostRequestbodyContentApplicationJSONSchemaPropertiesParametersAdditionalproperties struct {
}

// Paths1D4N6O4ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcsPropertiesCommit
// - The latest commit in the pipeline.
type Paths1D4N6O4ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcsPropertiesCommit struct {
	// REQUIRED; The body of the commit message.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The subject of the commit message.
	Subject *string `json:"subject,omitempty"`
}

type Paths1Dk5Cp8InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgProjectDataItems struct {
	// REQUIRED; Metrics for a single project, across all branches.
	Metrics *GetResponses200ContentApplicationJSONSchemaOrgProjectDataItemMetrics `json:"metrics,omitempty"`

	// REQUIRED; The name of the project.
	ProjectName *string `json:"project_name,omitempty"`

	// REQUIRED; Trends for a single project, across all branches.
	Trends *GetResponses200ContentApplicationJSONSchemaOrgProjectDataItemTrends `json:"trends,omitempty"`
}

type Paths1Dr6ZoaProjectSlugJobNumberTestsGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The programmatic location of the test.
	Classname *string `json:"classname,omitempty"`

	// REQUIRED; The file in which the test is defined.
	File *string `json:"file,omitempty"`

	// REQUIRED; The failure message associated with the test.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The name of the test.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Indication of whether the test succeeded.
	Result *string `json:"result,omitempty"`

	// REQUIRED; The time it took to run the test in seconds
	RunTime *float64 `json:"run_time,omitempty"`

	// REQUIRED; The program that generated the test results
	Source *string `json:"source,omitempty"`
}

type Paths1Fz7BoxContextIDEnvironmentVariableEnvVarNamePutResponses200ContentApplicationJSONSchema struct {
}

type Paths1G5ExweMeGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths1Gb9HneProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesVcsPropertiesCommit - The latest
// commit in the pipeline.
type Paths1Gb9HneProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesVcsPropertiesCommit struct {
	// REQUIRED; The body of the commit message.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The subject of the commit message.
	Subject *string `json:"subject,omitempty"`
}

type Paths1GqnmklPipelineContinuePostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; A configuration string for the pipeline.
	Configuration *string `json:"configuration,omitempty"`

	// REQUIRED; A pipeline continuation key.
	ContinuationKey *string `json:"continuation-key,omitempty"`

	// An object containing pipeline parameters and their values.
	Parameters map[string]*Paths1Cbkx8TPipelineContinuePostRequestbodyContentApplicationJSONSchemaPropertiesParametersAdditionalproperties `json:"parameters,omitempty"`
}

type Paths1Gx9OysProjectSlugCheckoutKeyGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1HghhbmPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerParametersAdditionalproperties struct {
}

type Paths1HupzkrProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesParametersAdditionalproperties struct {
}

type Paths1Ipbv5WInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1J0Z72LProjectSlugJobNumberTestsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1J5GyzxInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths1J6Xlb8ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesErrorsItems - An error with a
// type and message.
type Paths1J6Xlb8ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesErrorsItems struct {
	// REQUIRED; A human-readable error message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The type of error.
	Type *Enum31 `json:"type,omitempty"`
}

type Paths1Jqxx3LInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The VCS branch of a Workflow's trigger.
	Branch *string `json:"branch,omitempty"`

	// REQUIRED; The date and time the workflow was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The number of credits used during execution. Note that Insights is not a real time financial reporting tool and
	// should not be used for credit reporting.
	CreditsUsed *int64 `json:"credits_used,omitempty"`

	// REQUIRED; The duration in seconds of a run.
	Duration *int64 `json:"duration,omitempty"`

	// REQUIRED; The unique ID of the workflow.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Workflow status.
	Status *GetResponses200ContentApplicationJSONSchemaItemStatus `json:"status,omitempty"`

	// REQUIRED; The date and time the workflow stopped.
	StoppedAt *time.Time `json:"stopped_at,omitempty"`
}

// Paths1Lifd19ProjectSlugGetResponses200ContentApplicationJSONSchemaPropertiesVcsInfo - Information about the VCS that hosts
// the project source code.
type Paths1Lifd19ProjectSlugGetResponses200ContentApplicationJSONSchemaPropertiesVcsInfo struct {
	// REQUIRED
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED; The VCS provider
	Provider *Enum19 `json:"provider,omitempty"`

	// REQUIRED; URL to the repository hosting the project's code
	VcsURL *string `json:"vcs_url,omitempty"`
}

type Paths1Lxae54ScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesParametersAdditionalproperties struct {
}

type Paths1LzqphiInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchemaPropertiesMostFailedTestsItems struct {
	// REQUIRED; The class the test belongs to.
	Classname *string `json:"classname,omitempty"`

	// REQUIRED; The number of times the test failed
	FailedRuns *int64 `json:"failed_runs,omitempty"`

	// REQUIRED; The file the test belongs to.
	File *string `json:"file,omitempty"`

	// REQUIRED; Whether the test is flaky.
	Flaky *bool `json:"flaky,omitempty"`

	// REQUIRED; The name of the job.
	JobName *string `json:"job_name,omitempty"`

	// REQUIRED; The 95th percentile duration, in seconds, among a group of test runs.
	P95Duration *float64 `json:"p95_duration,omitempty"`

	// REQUIRED; The source of the test.
	Source *string `json:"source,omitempty"`

	// REQUIRED; The name of the test.
	TestName *string `json:"test_name,omitempty"`

	// REQUIRED; The total number of times the test was run.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

type Paths1M0Kg25InsightsTimeSeriesProjectSlugWorkflowsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths1M9Mes5ProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesTimetable - Timetable that specifies
// when a schedule triggers.
type Paths1M9Mes5ProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesTimetable struct {
	// REQUIRED; Days in a week in which the schedule triggers.
	DaysOfWeek []*Post201ApplicationJSONPropertiesItemsItem `json:"days-of-week,omitempty"`

	// REQUIRED; Hours in a day in which the schedule triggers.
	HoursOfDay []*int32 `json:"hours-of-day,omitempty"`

	// REQUIRED; Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour *int32 `json:"per-hour,omitempty"`
}

// Paths1Mk23J8InsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetrics
// - Metrics aggregated acrooss a workflow for a given time window.
type Paths1Mk23J8InsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetrics struct {
	// REQUIRED; Metrics relating to the duration of runs for a workflow.
	DurationMetrics *Paths10T0NvuInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetricsPropertiesDurationMetrics `json:"duration_metrics,omitempty"`

	// REQUIRED; The number of failed runs.
	FailedRuns *int64 `json:"failed_runs,omitempty"`

	// REQUIRED; The mean time to recovery (mean time between failures and their next success) in seconds.
	Mttr *int64 `json:"mttr,omitempty"`

	// REQUIRED
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The number of successful runs.
	SuccessfulRuns *int64 `json:"successful_runs,omitempty"`

	// REQUIRED; The average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial
	// reporting tool and should not be used for credit reporting.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`

	// REQUIRED; The end of the aggregation window for workflow metrics.
	WindowEnd *time.Time `json:"window_end,omitempty"`

	// REQUIRED; The start of the aggregation window for workflow metrics.
	WindowStart *time.Time `json:"window_start,omitempty"`
}

// Paths1My70ZsProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcsPropertiesCommit
// - The latest commit in the pipeline.
type Paths1My70ZsProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcsPropertiesCommit struct {
	// REQUIRED; The body of the commit message.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The subject of the commit message.
	Subject *string `json:"subject,omitempty"`
}

// Paths1NlpgwyProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerPropertiesActor
// - The user who triggered the Pipeline.
type Paths1NlpgwyProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerPropertiesActor struct {
	// REQUIRED; URL to the user's avatar on the VCS
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`
}

type Paths1Oit4F3MeCollaborationsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1OjszedPipelineGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths1Ol1MfwProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesOrganization - Information about an
// organization.
type Paths1Ol1MfwProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesOrganization struct {
	// REQUIRED; The name of the organization.
	Name *string `json:"name,omitempty"`
}

// Paths1OqdqwuInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchema - Project level timeseries
// metrics response
type Paths1OqdqwuInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; Aggregate metrics for a workflow at a time granularity
	Items []*Paths9OiapkInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

type Paths1P0Nrg0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerParametersAdditionalproperties struct {
}

// Paths1Q9S94PInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics
// - Metrics relating to a workflow job's runs.
type Paths1Q9S94PInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics struct {
	// REQUIRED; Metrics relating to the duration of runs for a workflow job.
	DurationMetrics *PathsQndpllInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics `json:"duration_metrics,omitempty"`

	// REQUIRED; The number of failed runs.
	FailedRuns *int64 `json:"failed_runs,omitempty"`

	// REQUIRED
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The number of successful runs.
	SuccessfulRuns *int64 `json:"successful_runs,omitempty"`

	// REQUIRED; The average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The total credits consumed by the job in the aggregation window. Note that Insights is not a real time financial
	// reporting tool and should not be used for credit reporting.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

type Paths1Ruevy5ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTriggerParametersAdditionalproperties struct {
}

type Paths1S7LurdContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Items []*PathsXikbsaContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

type Paths1S9FazpProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerParametersAdditionalproperties struct {
}

// Paths1Shoi5XInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics - Metrics
// relating to a workflow's runs.
type Paths1Shoi5XInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics struct {
	// REQUIRED; Metrics relating to the duration of runs for a workflow.
	DurationMetrics *Paths7Xy55NInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics `json:"duration_metrics,omitempty"`

	// REQUIRED; The number of failed runs.
	FailedRuns *int64 `json:"failed_runs,omitempty"`

	// REQUIRED; The mean time to recovery (mean time between failures and their next success) in seconds.
	Mttr *int64 `json:"mttr,omitempty"`

	// REQUIRED
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The number of successful runs.
	SuccessfulRuns *int64 `json:"successful_runs,omitempty"`

	// REQUIRED; The average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial
	// reporting tool and should not be used for credit reporting.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; The number of recovered workflow executions per day.
	TotalRecoveries *int64 `json:"total_recoveries,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

// Paths1Sp6QwoInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectData - Metrics and
// trends data aggregated for a given project.
type Paths1Sp6QwoInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectData struct {
	// REQUIRED; Metrics aggregated across all workflows and branches for a project.
	Metrics *Get200ApplicationJSONProperties `json:"metrics,omitempty"`

	// REQUIRED; Metric trends aggregated across all workflows and branches for a project.
	Trends *Paths12Ido9RInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectDataPropertiesTrends `json:"trends,omitempty"`
}

// Paths1Stc8H4ProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesMessagesItems - Message from CircleCI
// execution platform.
type Paths1Stc8H4ProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesMessagesItems struct {
	// REQUIRED; Information describing message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; Message type.
	Type *string `json:"type,omitempty"`

	// Value describing the reason for message to be added to the job.
	Reason *string `json:"reason,omitempty"`
}

type Paths1Twn2S7InsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths1U4V2P1InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgData - Aggregated metrics for
// an org, with trends.
type Paths1U4V2P1InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgData struct {
	// REQUIRED; Metrics for a single org metrics.
	Metrics *Paths1V0FoodInsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgDataPropertiesMetrics `json:"metrics,omitempty"`

	// REQUIRED; Trends for a single org.
	Trends *Paths4MoosfInsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgDataPropertiesTrends `json:"trends,omitempty"`
}

// Paths1UfjskrProjectSlugEnvvarGetResponses200ContentApplicationJSONSchemaPropertiesItems - EnvironmentVariablePair
type Paths1UfjskrProjectSlugEnvvarGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The name of the environment variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the environment variable.
	Value *string `json:"value,omitempty"`
}

// Paths1Ukw36CProjectSlugJobNumberArtifactsGetResponses200ContentApplicationJSONSchemaPropertiesItems - An artifact
type Paths1Ukw36CProjectSlugJobNumberArtifactsGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The index of the node that stored the artifact.
	NodeIndex *int64 `json:"node_index,omitempty"`

	// REQUIRED; The artifact path.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The URL to download the artifact contents.
	URL *string `json:"url,omitempty"`
}

type Paths1Uob40UContextIDEnvironmentVariableEnvVarNamePutResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1Utw5MhProjectSlugJobNumberCancelPostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths1V0FoodInsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgDataPropertiesMetrics - Metrics
// for a single org metrics.
type Paths1V0FoodInsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgDataPropertiesMetrics struct {
	// REQUIRED
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; The average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The total credits consumed over the current timeseries interval.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; Total duration, in seconds.
	TotalDurationSecs *int64 `json:"total_duration_secs,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

type Paths1VqfjfdContextGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1Vx7MmsProjectSlugPipelinePostRequestbodyContentApplicationJSONSchemaPropertiesParametersAdditionalproperties struct {
}

// Paths1Whucb0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger - A summary
// of the trigger.
type Paths1Whucb0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger struct {
	// REQUIRED; The user who triggered the Pipeline.
	Actor *PathsHuzhheProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerPropertiesActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the trigger was received.
	ReceivedAt *time.Time `json:"received_at,omitempty"`

	// REQUIRED; The type of trigger.
	Type *Enum26 `json:"type,omitempty"`
}

type Paths1Wjka4JInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The number of credits used during execution. Note that Insights is not a real time financial reporting tool and
	// should not be used for credit reporting.
	CreditsUsed *int64 `json:"credits_used,omitempty"`

	// REQUIRED; The duration in seconds of a run.
	Duration *int64 `json:"duration,omitempty"`

	// REQUIRED; The unique ID of the job.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The date and time the job started.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED; Job status.
	Status *Enum10 `json:"status,omitempty"`

	// REQUIRED; The time when the job stopped.
	StoppedAt *time.Time `json:"stopped_at,omitempty"`
}

type Paths1Wx5A0LScheduleIDGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1X4BaduProjectSlugEnvvarGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths1Xj6H24ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcs - VCS information
// for the pipeline.
type Paths1Xj6H24ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcs struct {
	// REQUIRED; URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For
	// other pipelines the origin_ and target_repository_urls will be the same.
	OriginRepositoryURL *string `json:"origin_repository_url,omitempty"`

	// REQUIRED; Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName *string `json:"provider_name,omitempty"`

	// REQUIRED; The code revision the pipeline ran.
	Revision *string `json:"revision,omitempty"`

	// REQUIRED; URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines,
	// this is the URL to the parent repo. For other pipelines, the origin_ and
	// target_repository_urls will be the same.
	TargetRepositoryURL *string `json:"target_repository_url,omitempty"`

	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that branch and tag are
	// mutually exclusive. To trigger a pipeline for a PR by number use
	// pull/<number>/head for the PR ref or pull/<number>/merge for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`

	// The latest commit in the pipeline.
	Commit *Paths1D4N6O4ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcsPropertiesCommit `json:"commit,omitempty"`

	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`

	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`

	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that branch and tag are
	// mutually exclusive.
	Tag *string `json:"tag,omitempty"`
}

type Paths1XvfglqContextPostRequestbodyContentApplicationJSONSchemaPropertiesOwnerOneof0 struct {
	// REQUIRED; The unique ID of the owner of the context. Specify either this or slug.
	ID *string `json:"id,omitempty"`

	// The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
	Type *PostContentSchemaOwner0Type `json:"type,omitempty"`
}

type Paths1Xxl4VsContextIDEnvironmentVariableGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths1Y507O2ProjectSlugJobNumberArtifactsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths1Y6Jy0UProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTriggerPropertiesActor - The
// user who triggered the Pipeline.
type Paths1Y6Jy0UProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTriggerPropertiesActor struct {
	// REQUIRED; URL to the user's avatar on the VCS
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`
}

// Paths1Y8Sr3XPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTrigger - A summary of the trigger.
type Paths1Y8Sr3XPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTrigger struct {
	// REQUIRED; The user who triggered the Pipeline.
	Actor *PathsBxzlgqPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTriggerPropertiesActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the trigger was received.
	ReceivedAt *time.Time `json:"received_at,omitempty"`

	// REQUIRED; The type of trigger.
	Type *Enum16 `json:"type,omitempty"`
}

// Paths1Yiabp7InsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchema - Project
// level timeseries metrics response
type Paths1Yiabp7InsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; Aggregate metrics for a workflow at a time granularity
	Items []*PathsOsf4AfInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// Paths30SionProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesVcs - VCS information for the
// pipeline.
type Paths30SionProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesVcs struct {
	// REQUIRED; URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For
	// other pipelines the origin_ and target_repository_urls will be the same.
	OriginRepositoryURL *string `json:"origin_repository_url,omitempty"`

	// REQUIRED; Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName *string `json:"provider_name,omitempty"`

	// REQUIRED; The code revision the pipeline ran.
	Revision *string `json:"revision,omitempty"`

	// REQUIRED; URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines,
	// this is the URL to the parent repo. For other pipelines, the origin_ and
	// target_repository_urls will be the same.
	TargetRepositoryURL *string `json:"target_repository_url,omitempty"`

	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that branch and tag are
	// mutually exclusive. To trigger a pipeline for a PR by number use
	// pull/<number>/head for the PR ref or pull/<number>/merge for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`

	// The latest commit in the pipeline.
	Commit *Paths1Gb9HneProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesVcsPropertiesCommit `json:"commit,omitempty"`

	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`

	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`

	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that branch and tag are
	// mutually exclusive.
	Tag *string `json:"tag,omitempty"`
}

// Paths3Qw5G4InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchema - Summary metrics with trends for the entire
// org, and for each project.
type Paths3Qw5G4InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; A list of all the project names in the organization.
	AllProjects []*string `json:"all_projects,omitempty"`

	// REQUIRED; Aggregated metrics for an org, with trends.
	OrgData *Paths1U4V2P1InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgData `json:"org_data,omitempty"`

	// REQUIRED; Metrics for a single project, across all branches
	OrgProjectData []*Paths1Dk5Cp8InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgProjectDataItems `json:"org_project_data,omitempty"`
}

type Paths47Xa4NInsightsPagesProjectSlugSummaryGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths4K9Vt6WorkflowIDGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths4MoosfInsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgDataPropertiesTrends - Trends
// for a single org.
type Paths4MoosfInsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesOrgDataPropertiesTrends struct {
	// REQUIRED; The trend value for the success rate.
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; Trend value for the average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The trend value for total credits consumed.
	TotalCreditsUsed *float32 `json:"total_credits_used,omitempty"`

	// REQUIRED; Trend value for total duration.
	TotalDurationSecs *float32 `json:"total_duration_secs,omitempty"`

	// REQUIRED; The trend value for total number of runs.
	TotalRuns *float32 `json:"total_runs,omitempty"`
}

// Paths51W5KiProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesParallelRunsItems - Info about a status
// of the parallel run.
type Paths51W5KiProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesParallelRunsItems struct {
	// REQUIRED; Index of the parallel run.
	Index *int64 `json:"index,omitempty"`

	// REQUIRED; Status of the parallel run.
	Status *string `json:"status,omitempty"`
}

// Paths52G1QuScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesTimetable - Timetable that specifies when a schedule
// triggers.
type Paths52G1QuScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesTimetable struct {
	// REQUIRED; Days in a week in which the schedule triggers.
	DaysOfWeek []*Get200ApplicationJSONPropertiesPropertiesItemsItem `json:"days-of-week,omitempty"`

	// REQUIRED; Hours in a day in which the schedule triggers.
	HoursOfDay []*int32 `json:"hours-of-day,omitempty"`

	// REQUIRED; Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour *int32 `json:"per-hour,omitempty"`
}

type Paths5Cns4ZInsightsProjectSlugWorkflowsWorkflowNameGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths5Ni3DkProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesParametersAdditionalproperties struct {
}

type Paths6Qlob3ProjectSlugPipelineGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths70Jnk9PipelineContinuePostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths749I1CWorkflowIDJobGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths75Wz5EProjectSlugPipelineMineGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths7Iz09NContextPostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths7LpiobContextIDDeleteResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths7Xy55NInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics
// - Metrics relating to the duration of runs for a workflow.
type Paths7Xy55NInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics struct {
	// REQUIRED; The max duration, in seconds, among a group of runs.
	Max *int64 `json:"max,omitempty"`

	// REQUIRED; The mean duration, in seconds, among a group of runs.
	Mean *int64 `json:"mean,omitempty"`

	// REQUIRED; The median duration, in seconds, among a group of runs.
	Median *int64 `json:"median,omitempty"`

	// REQUIRED; The minimum duration, in seconds, among a group of runs.
	Min *int64 `json:"min,omitempty"`

	// REQUIRED; The 95th percentile duration, in seconds, among a group of runs.
	P95 *int64 `json:"p95,omitempty"`

	// REQUIRED; The standard deviation, in seconds, among a group of runs.
	StandardDeviation *float32 `json:"standard_deviation,omitempty"`
}

// Paths807O16ProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesActor - The attribution actor who will
// run the scheduled pipeline.
type Paths807O16ProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesActor struct {
	// REQUIRED; The unique ID of the user.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`

	// REQUIRED; The name of the user.
	Name *string `json:"name,omitempty"`
}

type Paths80B0NjProjectSlugCheckoutKeyFingerprintDeleteResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths87WcdjInsightsOrgSlugSummaryGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// Paths9Giy7RProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItems - A schedule response
type Paths9Giy7RProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The attribution actor who will run the scheduled pipeline.
	Actor *GetResponses200ContentApplicationJSONSchemaItemActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created-at,omitempty"`

	// REQUIRED; Description of the schedule.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The unique ID of the schedule.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Name of the schedule.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]*Paths1HupzkrProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesParametersAdditionalproperties `json:"parameters,omitempty"`

	// REQUIRED; The project-slug for the schedule
	ProjectSlug *string `json:"project-slug,omitempty"`

	// REQUIRED; Timetable that specifies when a schedule triggers.
	Timetable *GetResponses200ContentApplicationJSONSchemaItemTimetable `json:"timetable,omitempty"`

	// REQUIRED; The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated-at,omitempty"`
}

type Paths9OiapkInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The end time of the last execution included in the metrics.
	MaxEndedAt *time.Time `json:"max_ended_at,omitempty"`

	// REQUIRED; Metrics relating to a workflow's runs.
	Metrics *GetResponses200ContentApplicationJSONSchemaItemMetrics `json:"metrics,omitempty"`

	// REQUIRED; The start time for the earliest execution included in the metrics.
	MinStartedAt *time.Time `json:"min_started_at,omitempty"`

	// REQUIRED; The name of the workflow.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The start of the interval for timeseries metrics.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

type Paths9Yc60XInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchemaPropertiesTestRunsItems struct {
	// REQUIRED; The number of the pipeline associated with the provided test counts
	PipelineNumber *int64 `json:"pipeline_number,omitempty"`

	// REQUIRED; The success rate calculated from test counts
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; Test counts for a given pipeline number
	TestCounts *GetResponses200ContentApplicationJSONSchemaTestRunsItemTestCounts `json:"test_counts,omitempty"`

	// REQUIRED; The ID of the workflow associated with the provided test counts
	WorkflowID interface{} `json:"workflow_id,omitempty"`
}

// PathsAivi1PipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems - A pipeline response.
type PathsAivi1PipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A sequence of errors that have occurred within the pipeline.
	Errors []*Get200ApplicationJSONPropertiesItemsErrorsItem `json:"errors,omitempty"`

	// REQUIRED; The unique ID of the pipeline.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The number of the pipeline.
	Number *int64 `json:"number,omitempty"`

	// REQUIRED; The project-slug for the pipeline.
	ProjectSlug *string `json:"project_slug,omitempty"`

	// REQUIRED; The current state of the pipeline.
	State *GetResponses200ContentApplicationJSONSchemaItemState `json:"state,omitempty"`

	// REQUIRED; A summary of the trigger.
	Trigger *GetResponses200ContentApplicationJSONSchemaItemTrigger `json:"trigger,omitempty"`

	// Dictionary of
	TriggerParameters map[string]*Paths1HghhbmPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerParametersAdditionalproperties `json:"trigger_parameters,omitempty"`

	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// VCS information for the pipeline.
	Vcs *GetResponses200ContentApplicationJSONSchemaItemVcs `json:"vcs,omitempty"`
}

type PathsAlzg1GInsightsProjectSlugBranchesGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsB717FhProjectSlugScheduleGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsBc091TInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; Metrics relating to a workflow job's runs.
	Metrics *Paths1Q9S94PInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics `json:"metrics,omitempty"`

	// REQUIRED; The name of the job.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The end of the aggregation window for job metrics.
	WindowEnd *time.Time `json:"window_end,omitempty"`

	// REQUIRED; The start of the aggregation window for job metrics.
	WindowStart *time.Time `json:"window_start,omitempty"`
}

// PathsBefzz0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems - A pipeline response.
type PathsBefzz0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A sequence of errors that have occurred within the pipeline.
	Errors []*PathsIex7H2ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesErrorsItems `json:"errors,omitempty"`

	// REQUIRED; The unique ID of the pipeline.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The number of the pipeline.
	Number *int64 `json:"number,omitempty"`

	// REQUIRED; The project-slug for the pipeline.
	ProjectSlug *string `json:"project_slug,omitempty"`

	// REQUIRED; The current state of the pipeline.
	State *Enum25 `json:"state,omitempty"`

	// REQUIRED; A summary of the trigger.
	Trigger *Paths1Whucb0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger `json:"trigger,omitempty"`

	// Dictionary of slug-pipeline·get·responses·200·content·application-json·schema·properties·items·items·properties·triggerparameters·additionalproperties>
	TriggerParameters map[string]*Paths1P0Nrg0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerParametersAdditionalproperties `json:"trigger_parameters,omitempty"`

	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// VCS information for the pipeline.
	Vcs *PathsQxlkfProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcs `json:"vcs,omitempty"`
}

// PathsBxzlgqPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTriggerPropertiesActor - The user who triggered
// the Pipeline.
type PathsBxzlgqPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTriggerPropertiesActor struct {
	// REQUIRED; URL to the user's avatar on the VCS
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`
}

type PathsClznedPipelineIDConfigGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// PathsCxwwlhPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesVcsPropertiesCommit - The latest commit in the
// pipeline.
type PathsCxwwlhPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesVcsPropertiesCommit struct {
	// REQUIRED; The body of the commit message.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The subject of the commit message.
	Subject *string `json:"subject,omitempty"`
}

// PathsDipxqfProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItems - A pipeline response.
type PathsDipxqfProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A sequence of errors that have occurred within the pipeline.
	Errors []*PathsTbauj4ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesErrorsItems `json:"errors,omitempty"`

	// REQUIRED; The unique ID of the pipeline.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The number of the pipeline.
	Number *int64 `json:"number,omitempty"`

	// REQUIRED; The project-slug for the pipeline.
	ProjectSlug *string `json:"project_slug,omitempty"`

	// REQUIRED; The current state of the pipeline.
	State *Enum29 `json:"state,omitempty"`

	// REQUIRED; A summary of the trigger.
	Trigger *Paths170Uh0XProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger `json:"trigger,omitempty"`

	// Dictionary of slug-pipeline-mine·get·responses·200·content·application-json·schema·properties·items·items·properties·triggerparameters·additionalproperties>
	TriggerParameters map[string]*Paths1S9FazpProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerParametersAdditionalproperties `json:"trigger_parameters,omitempty"`

	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// VCS information for the pipeline.
	Vcs *Paths1Xj6H24ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcs `json:"vcs,omitempty"`
}

// PathsDoiy03ProjectSlugCheckoutKeyGetResponses200ContentApplicationJSONSchemaPropertiesItems - CheckoutKey
type PathsDoiy03ProjectSlugCheckoutKeyGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The date and time the checkout key was created.
	CreatedAt *time.Time `json:"created-at,omitempty"`

	// REQUIRED; An SSH key fingerprint.
	Fingerprint *string `json:"fingerprint,omitempty"`

	// REQUIRED; A boolean value that indicates if this key is preferred.
	Preferred *bool `json:"preferred,omitempty"`

	// REQUIRED; A public SSH key.
	PublicKey *string `json:"public-key,omitempty"`

	// REQUIRED; The type of checkout key. This may be either deploy-key or github-user-key.
	Type *GetResponses200ContentApplicationJSONSchemaItemType `json:"type,omitempty"`
}

type PathsDt5K8QProjectSlugPipelinePostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// PathsE69Hh5PipelineIDWorkflowGetResponses200ContentApplicationJSONSchemaPropertiesItems - A workflow
type PathsE69Hh5PipelineIDWorkflowGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The date and time the workflow was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique ID of the workflow.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The name of the workflow.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The ID of the pipeline this workflow belongs to.
	PipelineID *string `json:"pipeline_id,omitempty"`

	// REQUIRED; The number of the pipeline this workflow belongs to.
	PipelineNumber *int64 `json:"pipeline_number,omitempty"`

	// REQUIRED; The project-slug for the pipeline this workflow belongs to.
	ProjectSlug *string `json:"project_slug,omitempty"`

	// REQUIRED
	StartedBy *string `json:"started_by,omitempty"`

	// REQUIRED; The current status of the workflow.
	Status *Enum18 `json:"status,omitempty"`

	// REQUIRED; The date and time the workflow stopped.
	StoppedAt  *time.Time `json:"stopped_at,omitempty"`
	CanceledBy *string    `json:"canceled_by,omitempty"`
	ErroredBy  *string    `json:"errored_by,omitempty"`

	// Tag used for the workflow
	Tag *GetResponses200ContentApplicationJSONSchemaItemTag `json:"tag,omitempty"`
}

type PathsEaizjsProjectSlugJobNumberGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsEbrb58UserIDGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// PathsEl56YsScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesTimetable - Timetable that specifies when a
// schedule triggers.
type PathsEl56YsScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesTimetable struct {
	// REQUIRED; Days in a week in which the schedule triggers.
	DaysOfWeek []*Patch200ApplicationJSONPropertiesItemsItem `json:"days-of-week,omitempty"`

	// REQUIRED; Hours in a day in which the schedule triggers.
	HoursOfDay []*int32 `json:"hours-of-day,omitempty"`

	// REQUIRED; Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour *int32 `json:"per-hour,omitempty"`
}

// PathsFqa3Z9InsightsProjectSlugFlakyTestsGetResponses200ContentApplicationJSONSchema - Flaky tests response
type PathsFqa3Z9InsightsProjectSlugFlakyTestsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; A list of flaky tests
	FlakyTests []*Paths10Gic9UInsightsProjectSlugFlakyTestsGetResponses200ContentApplicationJSONSchemaPropertiesFlakyTestsItems `json:"flaky-tests,omitempty"`
}

type PathsGu5Q2SScheduleIDDeleteResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsHdq9BContextPostRequestbodyContentApplicationJSONSchemaPropertiesOwnerOneof1 struct {
	// REQUIRED; A string that represents an organization. Specify either this or id. Cannot be used for accounts.
	Slug *string `json:"slug,omitempty"`

	// The type of owner. Defaults to "organization". Accounts are only used as context owners in server and must be specified
	// by an id instead of a slug.
	Type *PostContentSchemaOwner1Type `json:"type,omitempty"`
}

// PathsHuzhheProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerPropertiesActor
// - The user who triggered the Pipeline.
type PathsHuzhheProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTriggerPropertiesActor struct {
	// REQUIRED; URL to the user's avatar on the VCS
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`
}

type PathsIdf99EContextIDEnvironmentVariableEnvVarNamePutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The value of the environment variable
	Value *string `json:"value,omitempty"`
}

// PathsIex7H2ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesErrorsItems - An error
// with a type and message.
type PathsIex7H2ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesErrorsItems struct {
	// REQUIRED; A human-readable error message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The type of error.
	Type *Enum24 `json:"type,omitempty"`
}

type PathsJq0ZbwInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchemaPropertiesSlowestTestsItems struct {
	// REQUIRED; The class the test belongs to.
	Classname *string `json:"classname,omitempty"`

	// REQUIRED; The number of times the test failed
	FailedRuns *int64 `json:"failed_runs,omitempty"`

	// REQUIRED; The file the test belongs to.
	File *string `json:"file,omitempty"`

	// REQUIRED; Whether the test is flaky.
	Flaky *bool `json:"flaky,omitempty"`

	// REQUIRED; The name of the job.
	JobName *string `json:"job_name,omitempty"`

	// REQUIRED; The 95th percentile duration, in seconds, among a group of test runs.
	P95Duration *float64 `json:"p95_duration,omitempty"`

	// REQUIRED; The source of the test.
	Source *string `json:"source,omitempty"`

	// REQUIRED; The name of the test.
	TestName *string `json:"test_name,omitempty"`

	// REQUIRED; The total number of times the test was run.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

// PathsKbfb5WProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesProject - Information about a project.
type PathsKbfb5WProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesProject struct {
	// REQUIRED; URL to the repository hosting the project's code
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED; The name of the project
	Name *string `json:"name,omitempty"`

	// REQUIRED; Project slug in the form vcs-slug/org-name/repo-name. The / characters may be URL-escaped.
	Slug *string `json:"slug,omitempty"`
}

type PathsKc5Y5HInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; Metrics relating to a workflow's runs.
	Metrics *Paths1Shoi5XInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics `json:"metrics,omitempty"`

	// REQUIRED; The name of the workflow.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The end of the aggregation window for workflow metrics.
	WindowEnd *time.Time `json:"window_end,omitempty"`

	// REQUIRED; The start of the aggregation window for workflow metrics.
	WindowStart *time.Time `json:"window_start,omitempty"`
}

type PathsKncupbScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesParametersAdditionalproperties struct {
}

// PathsLsms9VInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics
// - Metrics relating to a workflow's runs.
type PathsLsms9VInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics struct {
	// REQUIRED; Metrics relating to the duration of runs for a workflow.
	DurationMetrics *PathsRdfecrInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics `json:"duration_metrics,omitempty"`

	// REQUIRED; The number of failed runs.
	FailedRuns *int64 `json:"failed_runs,omitempty"`

	// REQUIRED; The median credits consumed over the current timeseries interval.
	MedianCreditsUsed *int64 `json:"median_credits_used,omitempty"`

	// REQUIRED; The number of successful runs.
	SuccessfulRuns *int64 `json:"successful_runs,omitempty"`

	// REQUIRED; The average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The total credits consumed over the current timeseries interval.
	TotalCreditsUsed *int64 `json:"total_credits_used,omitempty"`

	// REQUIRED; The total number of runs.
	TotalRuns *int64 `json:"total_runs,omitempty"`
}

// PathsMa46A6PipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesErrorsItems - An error with a type and message.
type PathsMa46A6PipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesErrorsItems struct {
	// REQUIRED; A human-readable error message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The type of error.
	Type *GetResponses200ContentApplicationJSONSchemaErrorsItemType `json:"type,omitempty"`
}

// PathsMf6X1UScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesActor - The attribution actor who will run
// the scheduled pipeline.
type PathsMf6X1UScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesActor struct {
	// REQUIRED; The unique ID of the user.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`

	// REQUIRED; The name of the user.
	Name *string `json:"name,omitempty"`
}

type PathsMyw6BsPipelineIDGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// PathsOc3Pz3ScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesActor - The attribution actor who will run the
// scheduled pipeline.
type PathsOc3Pz3ScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesActor struct {
	// REQUIRED; The unique ID of the user.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`

	// REQUIRED; The name of the user.
	Name *string `json:"name,omitempty"`
}

type PathsOsf4AfInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; The end time of the last execution included in the metrics.
	MaxEndedAt *time.Time `json:"max_ended_at,omitempty"`

	// REQUIRED; Metrics relating to a workflow's runs.
	Metrics *PathsLsms9VInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetrics `json:"metrics,omitempty"`

	// REQUIRED; The start time for the earliest execution included in the metrics.
	MinStartedAt *time.Time `json:"min_started_at,omitempty"`

	// REQUIRED; The name of the workflow.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The start of the interval for timeseries metrics.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// PathsOtgng0WorkflowIDRerunPostResponses202ContentApplicationJSONSchema - A response to rerunning a workflow
type PathsOtgng0WorkflowIDRerunPostResponses202ContentApplicationJSONSchema struct {
	// REQUIRED; The ID of the newly-created workflow.
	WorkflowID *string `json:"workflow_id,omitempty"`
}

// PathsOvr64LProjectSlugScheduleGetResponses200ContentApplicationJSONSchema - A sequence of schedules
type PathsOvr64LProjectSlugScheduleGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Items []*Paths9Giy7RProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

type PathsP6SqhvInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// PathsPc96GvInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesTrends -
// Trends for aggregated metrics acrooss a workflow for a given time window.
type PathsPc96GvInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesTrends struct {
	// REQUIRED; The trend value for number of failed runs.
	FailedRuns *float32 `json:"failed_runs,omitempty"`

	// REQUIRED; Trend value for the 50th percentile duration for a workflow for a given time window.
	MedianDurationSecs *float32 `json:"median_duration_secs,omitempty"`

	// REQUIRED; trend for mean time to recovery (mean time between failures and their next success).
	Mttr *float32 `json:"mttr,omitempty"`

	// REQUIRED; Trend value for the 95th percentile duration for a workflow for a given time window.
	P95DurationSecs *float32 `json:"p95_duration_secs,omitempty"`

	// REQUIRED; The trend value for the success rate.
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// REQUIRED; Trend value for the average number of runs per day.
	Throughput *float32 `json:"throughput,omitempty"`

	// REQUIRED; The trend value for total credits consumed.
	TotalCreditsUsed *float32 `json:"total_credits_used,omitempty"`

	// REQUIRED; The trend value for total number of runs.
	TotalRuns *float32 `json:"total_runs,omitempty"`
}

type PathsPh0YokPipelineIDWorkflowGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsPl1TbnInsightsProjectSlugWorkflowsGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsQ3Ks49ContextPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The user defined name of the context.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Owner *PostContentSchemaOwner `json:"owner,omitempty"`
}

type PathsQicxt1ProjectSlugEnvvarNameGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// PathsQndpllInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics
// - Metrics relating to the duration of runs for a workflow job.
type PathsQndpllInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics struct {
	// REQUIRED; The max duration, in seconds, among a group of runs.
	Max *int64 `json:"max,omitempty"`

	// REQUIRED; The mean duration, in seconds, among a group of runs.
	Mean *int64 `json:"mean,omitempty"`

	// REQUIRED; The median duration, in seconds, among a group of runs.
	Median *int64 `json:"median,omitempty"`

	// REQUIRED; The minimum duration, in seconds, among a group of runs.
	Min *int64 `json:"min,omitempty"`

	// REQUIRED; The 95th percentile duration, in seconds, among a group of runs.
	P95 *int64 `json:"p95,omitempty"`

	// REQUIRED; The standard deviation, in seconds, among a group of runs.
	StandardDeviation *float32 `json:"standard_deviation,omitempty"`
}

// PathsQxlkfProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcs - VCS information
// for the pipeline.
type PathsQxlkfProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcs struct {
	// REQUIRED; URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For
	// other pipelines the origin_ and target_repository_urls will be the same.
	OriginRepositoryURL *string `json:"origin_repository_url,omitempty"`

	// REQUIRED; Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName *string `json:"provider_name,omitempty"`

	// REQUIRED; The code revision the pipeline ran.
	Revision *string `json:"revision,omitempty"`

	// REQUIRED; URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines,
	// this is the URL to the parent repo. For other pipelines, the origin_ and
	// target_repository_urls will be the same.
	TargetRepositoryURL *string `json:"target_repository_url,omitempty"`

	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that branch and tag are
	// mutually exclusive. To trigger a pipeline for a PR by number use
	// pull/<number>/head for the PR ref or pull/<number>/merge for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`

	// The latest commit in the pipeline.
	Commit *Paths1My70ZsProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesVcsPropertiesCommit `json:"commit,omitempty"`

	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`

	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`

	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that branch and tag are
	// mutually exclusive.
	Tag *string `json:"tag,omitempty"`
}

// PathsRd9DcuInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchema - Paginated recent workflow
// runs.
type PathsRd9DcuInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; Recent workflow runs.
	Items []*Paths1Jqxx3LInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// PathsRdfecrInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics
// - Metrics relating to the duration of runs for a workflow.
type PathsRdfecrInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesMetricsPropertiesDurationMetrics struct {
	// REQUIRED; The max duration, in seconds, among a group of runs.
	Max *int64 `json:"max,omitempty"`

	// REQUIRED; The median duration, in seconds, among a group of runs.
	Median *int64 `json:"median,omitempty"`

	// REQUIRED; The minimum duration, in seconds, among a group of runs.
	Min *int64 `json:"min,omitempty"`

	// REQUIRED; The 95th percentile duration, in seconds, among a group of runs.
	P95 *int64 `json:"p95,omitempty"`

	// REQUIRED; The total duration, in seconds, added across a group of runs.
	Total *int64 `json:"total,omitempty"`
}

// PathsRz1PsePipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesVcs - VCS information for the pipeline.
type PathsRz1PsePipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesVcs struct {
	// REQUIRED; URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For
	// other pipelines the origin_ and target_repository_urls will be the same.
	OriginRepositoryURL *string `json:"origin_repository_url,omitempty"`

	// REQUIRED; Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName *string `json:"provider_name,omitempty"`

	// REQUIRED; The code revision the pipeline ran.
	Revision *string `json:"revision,omitempty"`

	// REQUIRED; URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines,
	// this is the URL to the parent repo. For other pipelines, the origin_ and
	// target_repository_urls will be the same.
	TargetRepositoryURL *string `json:"target_repository_url,omitempty"`

	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that branch and tag are
	// mutually exclusive. To trigger a pipeline for a PR by number use
	// pull/<number>/head for the PR ref or pull/<number>/merge for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`

	// The latest commit in the pipeline.
	Commit *PathsCxwwlhPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesVcsPropertiesCommit `json:"commit,omitempty"`

	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`

	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`

	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that branch and tag are
	// mutually exclusive.
	Tag *string `json:"tag,omitempty"`
}

// PathsSlfcapInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchema - Workflow level
// aggregated metrics and trends response
type PathsSlfcapInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; Metrics aggregated acrooss a workflow for a given time window.
	Metrics *Paths1Mk23J8InsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetrics `json:"metrics,omitempty"`

	// REQUIRED; Trends for aggregated metrics acrooss a workflow for a given time window.
	Trends *PathsPc96GvInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesTrends `json:"trends,omitempty"`

	// REQUIRED; A list of all the workflow names for a given project.
	WorkflowNames []*string `json:"workflow_names,omitempty"`
}

// PathsSokv8NProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesExecutor - Information about executor
// used for a job.
type PathsSokv8NProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesExecutor struct {
	// REQUIRED; Resource class name.
	ResourceClass *string `json:"resource_class,omitempty"`

	// Executor type.
	Type *string `json:"type,omitempty"`
}

// PathsTbauj4ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesErrorsItems - An
// error with a type and message.
type PathsTbauj4ProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesErrorsItems struct {
	// REQUIRED; A human-readable error message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The type of error.
	Type *Enum28 `json:"type,omitempty"`
}

// PathsUxywyxInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchema - Paginated workflow summary metrics.
type PathsUxywyxInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; Workflow summary metrics.
	Items []*PathsKc5Y5HInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

type PathsVhogi0WorkflowIDCancelPostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// PathsVl5U0EProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesPipeline - Info about a pipeline the
// job is a part of.
type PathsVl5U0EProjectSlugJobNumberGetResponses200ContentApplicationJSONSchemaPropertiesPipeline struct {
	// REQUIRED; The unique ID of the pipeline.
	ID *string `json:"id,omitempty"`
}

type PathsW2VhagWorkflowIDRerunPostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

// PathsX3FxmxInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchema - Paginated recent
// job runs.
type PathsX3FxmxInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; Recent job runs.
	Items []*Paths1Wjka4JInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

type PathsXikbsaContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchemaPropertiesItems struct {
	// REQUIRED; ID of the context (UUID)
	ContextID *string `json:"context_id,omitempty"`

	// REQUIRED; The date and time the environment variable was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the environment variable
	Variable *string `json:"variable,omitempty"`
}

// PathsXllw8WInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchema - Paginated workflow
// job summary metrics.
type PathsXllw8WInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED; Job summary metrics.
	Items []*PathsBc091TInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

type PathsXxgky4ContextGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Items []*Get200ApplicationJSONPropertiesItemsItem `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

type PathsY2Uv2HContextIDGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsY5B79QInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectWorkflowDataItems struct {
	// REQUIRED; Metrics aggregated across a workflow or branchfor a project.
	Metrics *GetResponses200ContentApplicationJSONSchemaProjectWorkflowDataItemMetrics `json:"metrics,omitempty"`

	// REQUIRED; Trends aggregated across a workflow or branch for a project.
	Trends *GetResponses200ContentApplicationJSONSchemaProjectWorkflowDataItemTrends `json:"trends,omitempty"`

	// REQUIRED; The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`
}

type PathsYh42ItProjectSlugSchedulePostResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsYqskbyContextIDEnvironmentVariableEnvVarNamePutResponses200ContentApplicationJSONSchemaAnyof0 struct {
	// REQUIRED; ID of the context (UUID)
	ContextID *string `json:"context_id,omitempty"`

	// REQUIRED; The date and time the environment variable was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the environment variable
	Variable *string `json:"variable,omitempty"`
}

type PathsZhoc5IProjectSlugCheckoutKeyFingerprintGetResponsesDefaultContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsZsvny0InsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchema struct {
	// A list of all the branches for a given project.
	AllBranches []*string `json:"all_branches,omitempty"`

	// A list of all the workflows for a given project.
	AllWorkflows []*string `json:"all_workflows,omitempty"`

	// The unique ID of the organization
	OrgID interface{} `json:"org_id,omitempty"`

	// Metrics and trends data aggregated for a given project.
	ProjectData *Paths1Sp6QwoInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectData `json:"project_data,omitempty"`

	// The unique ID of the project
	ProjectID interface{} `json:"project_id,omitempty"`

	// A list of metrics and trends data for branches for a given project.
	ProjectWorkflowBranchData []*Paths126K3HiInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectWorkflowBranchDataItems `json:"project_workflow_branch_data,omitempty"`

	// A list of metrics and trends data for workflows for a given project.
	ProjectWorkflowData []*PathsY5B79QInsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchemaPropertiesProjectWorkflowDataItems `json:"project_workflow_data,omitempty"`
}

// Pipeline - A pipeline response.
type Pipeline struct {
	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A sequence of errors that have occurred within the pipeline.
	Errors []*PathsMa46A6PipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesErrorsItems `json:"errors,omitempty"`

	// REQUIRED; The unique ID of the pipeline.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The number of the pipeline.
	Number *int64 `json:"number,omitempty"`

	// REQUIRED; The project-slug for the pipeline.
	ProjectSlug *string `json:"project_slug,omitempty"`

	// REQUIRED; The current state of the pipeline.
	State *Enum15 `json:"state,omitempty"`

	// REQUIRED; A summary of the trigger.
	Trigger *Paths1Y8Sr3XPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTrigger `json:"trigger,omitempty"`

	// Dictionary of id·get·responses·200·content·application-json·schema·properties·triggerparameters·additionalproperties>
	TriggerParameters map[string]*Paths18Xv58BPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTriggerParametersAdditionalproperties `json:"trigger_parameters,omitempty"`

	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// VCS information for the pipeline.
	Vcs *PathsRz1PsePipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesVcs `json:"vcs,omitempty"`
}

// Pipeline0 - A pipeline response.
type Pipeline0 struct {
	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A sequence of errors that have occurred within the pipeline.
	Errors []*Paths1J6Xlb8ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesErrorsItems `json:"errors,omitempty"`

	// REQUIRED; The unique ID of the pipeline.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The number of the pipeline.
	Number *int64 `json:"number,omitempty"`

	// REQUIRED; The project-slug for the pipeline.
	ProjectSlug *string `json:"project_slug,omitempty"`

	// REQUIRED; The current state of the pipeline.
	State *Enum32 `json:"state,omitempty"`

	// REQUIRED; A summary of the trigger.
	Trigger *Paths101Hun1ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTrigger `json:"trigger,omitempty"`

	// Dictionary of slug-pipeline-pipelinenumber·get·responses·200·content·application-json·schema·properties·trigger_parameters·additionalproperties>
	TriggerParameters map[string]*Paths1Ruevy5ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTriggerParametersAdditionalproperties `json:"trigger_parameters,omitempty"`

	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// VCS information for the pipeline.
	Vcs *Paths30SionProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesVcs `json:"vcs,omitempty"`
}

// PipelineConfig - The configuration strings for the pipeline.
type PipelineConfig struct {
	// REQUIRED; The compiled configuration for the pipeline, after all orb expansion has been performed. If there were errors
	// processing the pipeline's configuration, then this field may be empty.
	Compiled *string `json:"compiled,omitempty"`

	// REQUIRED; The source configuration for the pipeline, before any config compilation has been performed. If there is no config,
	// then this field will be empty.
	Source *string `json:"source,omitempty"`

	// The compiled setup configuration for the pipeline, after all orb expansion has been performed. If there were errors processing
	// the pipeline's setup workflows, then this field may be empty.
	CompiledSetupConfig *string `json:"compiled-setup-config,omitempty"`

	// The setup configuration for the pipeline used for Setup Workflows. If there were errors processing the pipeline's configuration
	// or if setup workflows are not enabled, then this field should not exist
	SetupConfig *string `json:"setup-config,omitempty"`
}

// PipelineCreation - A pipeline creation response.
type PipelineCreation struct {
	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique ID of the pipeline.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The number of the pipeline.
	Number *int64 `json:"number,omitempty"`

	// REQUIRED; The current state of the pipeline.
	State *Enum27 `json:"state,omitempty"`
}

// PipelineListResponse - List of pipelines
type PipelineListResponse struct {
	// REQUIRED
	Items []*PathsAivi1PipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// PipelineListResponse0 - List of pipelines
type PipelineListResponse0 struct {
	// REQUIRED
	Items []*PathsBefzz0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// PipelineListResponse1 - List of pipelines
type PipelineListResponse1 struct {
	// REQUIRED
	Items []*PathsDipxqfProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

type PostContentSchemaOwner struct {
}

// PostContentSchemaTimetable - Timetable that specifies when a schedule triggers.
type PostContentSchemaTimetable struct {
	// REQUIRED; Days in a week in which the schedule triggers.
	DaysOfWeek []*PostContentSchemaTimetableDaysOfWeekItem `json:"days-of-week,omitempty"`

	// REQUIRED; Hours in a day in which the schedule triggers.
	HoursOfDay []*int32 `json:"hours-of-day,omitempty"`

	// REQUIRED; Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour *int32 `json:"per-hour,omitempty"`
}

// Project - NOTE: The definition of Project is subject to change.
type Project struct {
	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED; The name of the project
	Name *string `json:"name,omitempty"`

	// REQUIRED; The id of the organization the project belongs to
	OrganizationID *string `json:"organization_id,omitempty"`

	// REQUIRED; The name of the organization the project belongs to
	OrganizationName *string `json:"organization_name,omitempty"`

	// REQUIRED; The slug of the organization the project belongs to
	OrganizationSlug *string `json:"organization_slug,omitempty"`

	// REQUIRED; Project slug in the form vcs-slug/org-name/repo-name. The / characters may be URL-escaped.
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; Information about the VCS that hosts the project source code.
	VcsInfo *Paths1Lifd19ProjectSlugGetResponses200ContentApplicationJSONSchemaPropertiesVcsInfo `json:"vcs_info,omitempty"`
}

// RerunWorkflowParameters - The information you can supply when rerunning a workflow.
type RerunWorkflowParameters struct {
	// Whether to enable SSH access for the triggering user on the newly-rerun job. Requires the jobs parameter to be used and
	// so is mutually exclusive with the from_failed parameter.
	EnableSSH *bool `json:"enable_ssh,omitempty"`

	// Whether to rerun the workflow from the failed job. Mutually exclusive with the jobs parameter.
	FromFailed *bool `json:"from_failed,omitempty"`

	// A list of job IDs to rerun.
	Jobs []*string `json:"jobs,omitempty"`

	// Completes rerun using sparse trees logic, an optimization for workflows that have disconnected subgraphs. Requires jobs
	// parameter and so is mutually exclusive with the from_failed parameter.
	SparseTree *bool `json:"sparse_tree,omitempty"`
}

// Schedule - A schedule response
type Schedule struct {
	// REQUIRED; The attribution actor who will run the scheduled pipeline.
	Actor *Paths807O16ProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created-at,omitempty"`

	// REQUIRED; Description of the schedule.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The unique ID of the schedule.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Name of the schedule.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]*Paths5Ni3DkProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesParametersAdditionalproperties `json:"parameters,omitempty"`

	// REQUIRED; The project-slug for the schedule
	ProjectSlug *string `json:"project-slug,omitempty"`

	// REQUIRED; Timetable that specifies when a schedule triggers.
	Timetable *Paths1M9Mes5ProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesTimetable `json:"timetable,omitempty"`

	// REQUIRED; The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated-at,omitempty"`
}

// Schedule0 - A schedule response
type Schedule0 struct {
	// REQUIRED; The attribution actor who will run the scheduled pipeline.
	Actor *PathsOc3Pz3ScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created-at,omitempty"`

	// REQUIRED; Description of the schedule.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The unique ID of the schedule.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Name of the schedule.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]*PathsKncupbScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesParametersAdditionalproperties `json:"parameters,omitempty"`

	// REQUIRED; The project-slug for the schedule
	ProjectSlug *string `json:"project-slug,omitempty"`

	// REQUIRED; Timetable that specifies when a schedule triggers.
	Timetable *Paths52G1QuScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesTimetable `json:"timetable,omitempty"`

	// REQUIRED; The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated-at,omitempty"`
}

// Schedule1 - A schedule response
type Schedule1 struct {
	// REQUIRED; The attribution actor who will run the scheduled pipeline.
	Actor *PathsMf6X1UScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesActor `json:"actor,omitempty"`

	// REQUIRED; The date and time the pipeline was created.
	CreatedAt *time.Time `json:"created-at,omitempty"`

	// REQUIRED; Description of the schedule.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The unique ID of the schedule.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Name of the schedule.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]*Paths1Lxae54ScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesParametersAdditionalproperties `json:"parameters,omitempty"`

	// REQUIRED; The project-slug for the schedule
	ProjectSlug *string `json:"project-slug,omitempty"`

	// REQUIRED; Timetable that specifies when a schedule triggers.
	Timetable *PathsEl56YsScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesTimetable `json:"timetable,omitempty"`

	// REQUIRED; The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated-at,omitempty"`
}

// TestsResponse
type TestsResponse struct {
	// REQUIRED; TestsResponse
	Items []*Paths1Dr6ZoaProjectSlugJobNumberTestsGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// TriggerPipelineParameters - The information you can supply when triggering a pipeline.
type TriggerPipelineParameters struct {
	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that branch and tag are
	// mutually exclusive. To trigger a pipeline for a PR by number use
	// pull/<number>/head for the PR ref or pull/<number>/merge for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`

	// An object containing pipeline parameters and their values.
	Parameters map[string]*Paths1Vx7MmsProjectSlugPipelinePostRequestbodyContentApplicationJSONSchemaPropertiesParametersAdditionalproperties `json:"parameters,omitempty"`

	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that branch and tag are
	// mutually exclusive.
	Tag *string `json:"tag,omitempty"`
}

// UpdateScheduleParameters - The parameters for an update schedule request
type UpdateScheduleParameters struct {
	// The attribution-actor of the scheduled pipeline.
	AttributionActor *PatchContentSchemaAttributionActor `json:"attribution-actor,omitempty"`

	// Description of the schedule.
	Description *string `json:"description,omitempty"`

	// Name of the schedule.
	Name *string `json:"name,omitempty"`

	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]*Paths19974V0ScheduleIDPatchRequestbodyContentApplicationJSONSchemaPropertiesParametersAdditionalproperties `json:"parameters,omitempty"`

	// Timetable that specifies when a schedule triggers.
	Timetable *PatchContentSchemaTimetable `json:"timetable,omitempty"`
}

// User
type User struct {
	// REQUIRED; The unique ID of the user.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`

	// REQUIRED; The name of the user.
	Name *string `json:"name,omitempty"`
}

// User0 - User
type User0 struct {
	// REQUIRED; The unique ID of the user.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The login information for the user on the VCS.
	Login *string `json:"login,omitempty"`

	// REQUIRED; The name of the user.
	Name *string `json:"name,omitempty"`
}

// Workflow - A workflow
type Workflow struct {
	// REQUIRED; The date and time the workflow was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique ID of the workflow.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The name of the workflow.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The ID of the pipeline this workflow belongs to.
	PipelineID *string `json:"pipeline_id,omitempty"`

	// REQUIRED; The number of the pipeline this workflow belongs to.
	PipelineNumber *int64 `json:"pipeline_number,omitempty"`

	// REQUIRED; The project-slug for the pipeline this workflow belongs to.
	ProjectSlug *string `json:"project_slug,omitempty"`

	// REQUIRED
	StartedBy *string `json:"started_by,omitempty"`

	// REQUIRED; The current status of the workflow.
	Status *Enum43 `json:"status,omitempty"`

	// REQUIRED; The date and time the workflow stopped.
	StoppedAt  *time.Time `json:"stopped_at,omitempty"`
	CanceledBy *string    `json:"canceled_by,omitempty"`
	ErroredBy  *string    `json:"errored_by,omitempty"`

	// Tag used for the workflow
	Tag *Enum42 `json:"tag,omitempty"`
}

// WorkflowJobListResponse
type WorkflowJobListResponse struct {
	// REQUIRED
	Items []*Paths136Or3PWorkflowIDJobGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// WorkflowListResponse - A list of workflows and associated pagination token.
type WorkflowListResponse struct {
	// REQUIRED; A list of workflows.
	Items []*PathsE69Hh5PipelineIDWorkflowGetResponses200ContentApplicationJSONSchemaPropertiesItems `json:"items,omitempty"`

	// REQUIRED; A token to pass as a page-token query parameter to return the next page of results.
	NextPageToken *string `json:"next_page_token,omitempty"`
}
