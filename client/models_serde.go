//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/go@4.0.0-preview.40)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package client

import (
	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// MarshalJSON implements the json.Marshaller interface for type ArtifactListResponse.
func (a ArtifactListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", a.Items)
	populate(objectMap, "next_page_token", a.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CheckoutKey.
func (c CheckoutKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created-at", c.CreatedAt)
	populate(objectMap, "fingerprint", c.Fingerprint)
	populate(objectMap, "preferred", c.Preferred)
	populate(objectMap, "public-key", c.PublicKey)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CheckoutKey.
func (c *CheckoutKey) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created-at":
			err = unpopulateTimeRFC3339(val, &c.CreatedAt)
			delete(rawMsg, key)
		case "fingerprint":
			err = unpopulate(val, &c.Fingerprint)
			delete(rawMsg, key)
		case "preferred":
			err = unpopulate(val, &c.Preferred)
			delete(rawMsg, key)
		case "public-key":
			err = unpopulate(val, &c.PublicKey)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &c.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CheckoutKey0.
func (c CheckoutKey0) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created-at", c.CreatedAt)
	populate(objectMap, "fingerprint", c.Fingerprint)
	populate(objectMap, "preferred", c.Preferred)
	populate(objectMap, "public-key", c.PublicKey)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CheckoutKey0.
func (c *CheckoutKey0) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created-at":
			err = unpopulateTimeRFC3339(val, &c.CreatedAt)
			delete(rawMsg, key)
		case "fingerprint":
			err = unpopulate(val, &c.Fingerprint)
			delete(rawMsg, key)
		case "preferred":
			err = unpopulate(val, &c.Preferred)
			delete(rawMsg, key)
		case "public-key":
			err = unpopulate(val, &c.PublicKey)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &c.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CheckoutKeyListResponse.
func (c CheckoutKeyListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", c.Items)
	populate(objectMap, "next_page_token", c.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Context.
func (c Context) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", c.CreatedAt)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "name", c.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Context.
func (c *Context) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &c.CreatedAt)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &c.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &c.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Context0.
func (c Context0) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", c.CreatedAt)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "name", c.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Context0.
func (c *Context0) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &c.CreatedAt)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &c.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &c.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CreateScheduleParameters.
func (c CreateScheduleParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "attribution-actor", c.AttributionActor)
	populate(objectMap, "description", c.Description)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "parameters", c.Parameters)
	populate(objectMap, "timetable", c.Timetable)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentVariableListResponse.
func (e EnvironmentVariableListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", e.Items)
	populate(objectMap, "next_page_token", e.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Get200ApplicationJSONPropertiesItemsItem.
func (g Get200ApplicationJSONPropertiesItemsItem) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", g.CreatedAt)
	populate(objectMap, "id", g.ID)
	populate(objectMap, "name", g.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Get200ApplicationJSONPropertiesItemsItem.
func (g *Get200ApplicationJSONPropertiesItemsItem) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &g.CreatedAt)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &g.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &g.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GetResponses200ContentApplicationJSONSchemaItemTimetable.
func (g GetResponses200ContentApplicationJSONSchemaItemTimetable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "days-of-week", g.DaysOfWeek)
	populate(objectMap, "hours-of-day", g.HoursOfDay)
	populate(objectMap, "per-hour", g.PerHour)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GetResponses200ContentApplicationJSONSchemaItemTrigger.
func (g GetResponses200ContentApplicationJSONSchemaItemTrigger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", g.Actor)
	populateTimeRFC3339(objectMap, "received_at", g.ReceivedAt)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GetResponses200ContentApplicationJSONSchemaItemTrigger.
func (g *GetResponses200ContentApplicationJSONSchemaItemTrigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &g.Actor)
			delete(rawMsg, key)
		case "received_at":
			err = unpopulateTimeRFC3339(val, &g.ReceivedAt)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &g.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type JobDetails.
func (j JobDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "contexts", j.Contexts)
	populateTimeRFC3339(objectMap, "created_at", j.CreatedAt)
	populate(objectMap, "duration", j.Duration)
	populate(objectMap, "executor", j.Executor)
	populate(objectMap, "latest_workflow", j.LatestWorkflow)
	populate(objectMap, "messages", j.Messages)
	populate(objectMap, "name", j.Name)
	populate(objectMap, "number", j.Number)
	populate(objectMap, "organization", j.Organization)
	populate(objectMap, "parallel_runs", j.ParallelRuns)
	populate(objectMap, "parallelism", j.Parallelism)
	populate(objectMap, "pipeline", j.Pipeline)
	populate(objectMap, "project", j.Project)
	populateTimeRFC3339(objectMap, "queued_at", j.QueuedAt)
	populateTimeRFC3339(objectMap, "started_at", j.StartedAt)
	populate(objectMap, "status", &j.Status)
	populateTimeRFC3339(objectMap, "stopped_at", j.StoppedAt)
	populate(objectMap, "web_url", j.WebURL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobDetails.
func (j *JobDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "contexts":
			err = unpopulate(val, &j.Contexts)
			delete(rawMsg, key)
		case "created_at":
			err = unpopulateTimeRFC3339(val, &j.CreatedAt)
			delete(rawMsg, key)
		case "duration":
			err = unpopulate(val, &j.Duration)
			delete(rawMsg, key)
		case "executor":
			err = unpopulate(val, &j.Executor)
			delete(rawMsg, key)
		case "latest_workflow":
			err = unpopulate(val, &j.LatestWorkflow)
			delete(rawMsg, key)
		case "messages":
			err = unpopulate(val, &j.Messages)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &j.Name)
			delete(rawMsg, key)
		case "number":
			err = unpopulate(val, &j.Number)
			delete(rawMsg, key)
		case "organization":
			err = unpopulate(val, &j.Organization)
			delete(rawMsg, key)
		case "parallel_runs":
			err = unpopulate(val, &j.ParallelRuns)
			delete(rawMsg, key)
		case "parallelism":
			err = unpopulate(val, &j.Parallelism)
			delete(rawMsg, key)
		case "pipeline":
			err = unpopulate(val, &j.Pipeline)
			delete(rawMsg, key)
		case "project":
			err = unpopulate(val, &j.Project)
			delete(rawMsg, key)
		case "queued_at":
			err = unpopulateTimeRFC3339(val, &j.QueuedAt)
			delete(rawMsg, key)
		case "started_at":
			err = unpopulateTimeRFC3339(val, &j.StartedAt)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &j.Status)
			delete(rawMsg, key)
		case "stopped_at":
			err = unpopulateTimeRFC3339(val, &j.StoppedAt)
			delete(rawMsg, key)
		case "web_url":
			err = unpopulate(val, &j.WebURL)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PatchContentSchemaTimetable.
func (p PatchContentSchemaTimetable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "days-of-week", p.DaysOfWeek)
	populate(objectMap, "hours-of-day", p.HoursOfDay)
	populate(objectMap, "per-hour", p.PerHour)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths101Hun1ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTrigger.
func (p Paths101Hun1ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTrigger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", p.Actor)
	populateTimeRFC3339(objectMap, "received_at", p.ReceivedAt)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths101Hun1ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTrigger.
func (p *Paths101Hun1ProjectSlugPipelineNumberGetResponses200ContentApplicationJSONSchemaPropertiesTrigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &p.Actor)
			delete(rawMsg, key)
		case "received_at":
			err = unpopulateTimeRFC3339(val, &p.ReceivedAt)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths136Or3PWorkflowIDJobGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p Paths136Or3PWorkflowIDJobGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "approval_request_id", p.ApprovalRequestID)
	populate(objectMap, "approved_by", p.ApprovedBy)
	populate(objectMap, "canceled_by", p.CanceledBy)
	populate(objectMap, "dependencies", p.Dependencies)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "job_number", p.JobNumber)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "project_slug", p.ProjectSlug)
	populateTimeRFC3339(objectMap, "started_at", p.StartedAt)
	populate(objectMap, "status", &p.Status)
	populateTimeRFC3339(objectMap, "stopped_at", p.StoppedAt)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths136Or3PWorkflowIDJobGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *Paths136Or3PWorkflowIDJobGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "approval_request_id":
			err = unpopulate(val, &p.ApprovalRequestID)
			delete(rawMsg, key)
		case "approved_by":
			err = unpopulate(val, &p.ApprovedBy)
			delete(rawMsg, key)
		case "canceled_by":
			err = unpopulate(val, &p.CanceledBy)
			delete(rawMsg, key)
		case "dependencies":
			err = unpopulate(val, &p.Dependencies)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "job_number":
			err = unpopulate(val, &p.JobNumber)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "project_slug":
			err = unpopulate(val, &p.ProjectSlug)
			delete(rawMsg, key)
		case "started_at":
			err = unpopulateTimeRFC3339(val, &p.StartedAt)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "stopped_at":
			err = unpopulateTimeRFC3339(val, &p.StoppedAt)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths170Uh0XProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger.
func (p Paths170Uh0XProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", p.Actor)
	populateTimeRFC3339(objectMap, "received_at", p.ReceivedAt)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths170Uh0XProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger.
func (p *Paths170Uh0XProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &p.Actor)
			delete(rawMsg, key)
		case "received_at":
			err = unpopulateTimeRFC3339(val, &p.ReceivedAt)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths17Ss7PbInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchema.
func (p Paths17Ss7PbInsightsProjectSlugWorkflowsWorkflowNameTestMetricsGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "average_test_count", p.AverageTestCount)
	populate(objectMap, "most_failed_tests", p.MostFailedTests)
	populate(objectMap, "most_failed_tests_extra", p.MostFailedTestsExtra)
	populate(objectMap, "slowest_tests", p.SlowestTests)
	populate(objectMap, "slowest_tests_extra", p.SlowestTestsExtra)
	populate(objectMap, "test_runs", p.TestRuns)
	populate(objectMap, "total_test_runs", p.TotalTestRuns)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths1GqnmklPipelineContinuePostRequestbodyContentApplicationJSONSchema.
func (p Paths1GqnmklPipelineContinuePostRequestbodyContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configuration", p.Configuration)
	populate(objectMap, "continuation-key", p.ContinuationKey)
	populate(objectMap, "parameters", p.Parameters)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths1Jqxx3LInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p Paths1Jqxx3LInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "branch", p.Branch)
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "credits_used", p.CreditsUsed)
	populate(objectMap, "duration", p.Duration)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "status", p.Status)
	populateTimeRFC3339(objectMap, "stopped_at", p.StoppedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths1Jqxx3LInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *Paths1Jqxx3LInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "branch":
			err = unpopulate(val, &p.Branch)
			delete(rawMsg, key)
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "credits_used":
			err = unpopulate(val, &p.CreditsUsed)
			delete(rawMsg, key)
		case "duration":
			err = unpopulate(val, &p.Duration)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "stopped_at":
			err = unpopulateTimeRFC3339(val, &p.StoppedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths1M9Mes5ProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesTimetable.
func (p Paths1M9Mes5ProjectSlugSchedulePostResponses201ContentApplicationJSONSchemaPropertiesTimetable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "days-of-week", p.DaysOfWeek)
	populate(objectMap, "hours-of-day", p.HoursOfDay)
	populate(objectMap, "per-hour", p.PerHour)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths1Mk23J8InsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetrics.
func (p Paths1Mk23J8InsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetrics) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "duration_metrics", p.DurationMetrics)
	populate(objectMap, "failed_runs", p.FailedRuns)
	populate(objectMap, "mttr", p.Mttr)
	populate(objectMap, "success_rate", p.SuccessRate)
	populate(objectMap, "successful_runs", p.SuccessfulRuns)
	populate(objectMap, "throughput", p.Throughput)
	populate(objectMap, "total_credits_used", p.TotalCreditsUsed)
	populate(objectMap, "total_runs", p.TotalRuns)
	populateTimeRFC3339(objectMap, "window_end", p.WindowEnd)
	populateTimeRFC3339(objectMap, "window_start", p.WindowStart)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths1Mk23J8InsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetrics.
func (p *Paths1Mk23J8InsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchemaPropertiesMetrics) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "duration_metrics":
			err = unpopulate(val, &p.DurationMetrics)
			delete(rawMsg, key)
		case "failed_runs":
			err = unpopulate(val, &p.FailedRuns)
			delete(rawMsg, key)
		case "mttr":
			err = unpopulate(val, &p.Mttr)
			delete(rawMsg, key)
		case "success_rate":
			err = unpopulate(val, &p.SuccessRate)
			delete(rawMsg, key)
		case "successful_runs":
			err = unpopulate(val, &p.SuccessfulRuns)
			delete(rawMsg, key)
		case "throughput":
			err = unpopulate(val, &p.Throughput)
			delete(rawMsg, key)
		case "total_credits_used":
			err = unpopulate(val, &p.TotalCreditsUsed)
			delete(rawMsg, key)
		case "total_runs":
			err = unpopulate(val, &p.TotalRuns)
			delete(rawMsg, key)
		case "window_end":
			err = unpopulateTimeRFC3339(val, &p.WindowEnd)
			delete(rawMsg, key)
		case "window_start":
			err = unpopulateTimeRFC3339(val, &p.WindowStart)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths1OqdqwuInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchema.
func (p Paths1OqdqwuInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths1S7LurdContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchema.
func (p Paths1S7LurdContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths1Whucb0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger.
func (p Paths1Whucb0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", p.Actor)
	populateTimeRFC3339(objectMap, "received_at", p.ReceivedAt)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths1Whucb0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger.
func (p *Paths1Whucb0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItemsPropertiesTrigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &p.Actor)
			delete(rawMsg, key)
		case "received_at":
			err = unpopulateTimeRFC3339(val, &p.ReceivedAt)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths1Wjka4JInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p Paths1Wjka4JInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "credits_used", p.CreditsUsed)
	populate(objectMap, "duration", p.Duration)
	populate(objectMap, "id", p.ID)
	populateTimeRFC3339(objectMap, "started_at", p.StartedAt)
	populate(objectMap, "status", p.Status)
	populateTimeRFC3339(objectMap, "stopped_at", p.StoppedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths1Wjka4JInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *Paths1Wjka4JInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "credits_used":
			err = unpopulate(val, &p.CreditsUsed)
			delete(rawMsg, key)
		case "duration":
			err = unpopulate(val, &p.Duration)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "started_at":
			err = unpopulateTimeRFC3339(val, &p.StartedAt)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "stopped_at":
			err = unpopulateTimeRFC3339(val, &p.StoppedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths1Y8Sr3XPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTrigger.
func (p Paths1Y8Sr3XPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTrigger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", p.Actor)
	populateTimeRFC3339(objectMap, "received_at", p.ReceivedAt)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths1Y8Sr3XPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTrigger.
func (p *Paths1Y8Sr3XPipelineIDGetResponses200ContentApplicationJSONSchemaPropertiesTrigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &p.Actor)
			delete(rawMsg, key)
		case "received_at":
			err = unpopulateTimeRFC3339(val, &p.ReceivedAt)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths1Yiabp7InsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchema.
func (p Paths1Yiabp7InsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths3Qw5G4InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchema.
func (p Paths3Qw5G4InsightsOrgSlugSummaryGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "all_projects", p.AllProjects)
	populate(objectMap, "org_data", p.OrgData)
	populate(objectMap, "org_project_data", p.OrgProjectData)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths52G1QuScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesTimetable.
func (p Paths52G1QuScheduleIDGetResponses200ContentApplicationJSONSchemaPropertiesTimetable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "days-of-week", p.DaysOfWeek)
	populate(objectMap, "hours-of-day", p.HoursOfDay)
	populate(objectMap, "per-hour", p.PerHour)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Paths9Giy7RProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p Paths9Giy7RProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", p.Actor)
	populateTimeRFC3339(objectMap, "created-at", p.CreatedAt)
	populate(objectMap, "description", p.Description)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "parameters", p.Parameters)
	populate(objectMap, "project-slug", p.ProjectSlug)
	populate(objectMap, "timetable", p.Timetable)
	populateTimeRFC3339(objectMap, "updated-at", p.UpdatedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths9Giy7RProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *Paths9Giy7RProjectSlugScheduleGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &p.Actor)
			delete(rawMsg, key)
		case "created-at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &p.Description)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &p.Parameters)
			delete(rawMsg, key)
		case "project-slug":
			err = unpopulate(val, &p.ProjectSlug)
			delete(rawMsg, key)
		case "timetable":
			err = unpopulate(val, &p.Timetable)
			delete(rawMsg, key)
		case "updated-at":
			err = unpopulateTimeRFC3339(val, &p.UpdatedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Paths9OiapkInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p Paths9OiapkInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "max_ended_at", p.MaxEndedAt)
	populate(objectMap, "metrics", p.Metrics)
	populateTimeRFC3339(objectMap, "min_started_at", p.MinStartedAt)
	populate(objectMap, "name", p.Name)
	populateTimeRFC3339(objectMap, "timestamp", p.Timestamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Paths9OiapkInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *Paths9OiapkInsightsTimeSeriesProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "max_ended_at":
			err = unpopulateTimeRFC3339(val, &p.MaxEndedAt)
			delete(rawMsg, key)
		case "metrics":
			err = unpopulate(val, &p.Metrics)
			delete(rawMsg, key)
		case "min_started_at":
			err = unpopulateTimeRFC3339(val, &p.MinStartedAt)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "timestamp":
			err = unpopulateTimeRFC3339(val, &p.Timestamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsAivi1PipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsAivi1PipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "errors", p.Errors)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "number", p.Number)
	populate(objectMap, "project_slug", p.ProjectSlug)
	populate(objectMap, "state", p.State)
	populate(objectMap, "trigger", p.Trigger)
	populate(objectMap, "trigger_parameters", p.TriggerParameters)
	populateTimeRFC3339(objectMap, "updated_at", p.UpdatedAt)
	populate(objectMap, "vcs", p.Vcs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsAivi1PipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsAivi1PipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, &p.Errors)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "number":
			err = unpopulate(val, &p.Number)
			delete(rawMsg, key)
		case "project_slug":
			err = unpopulate(val, &p.ProjectSlug)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		case "trigger":
			err = unpopulate(val, &p.Trigger)
			delete(rawMsg, key)
		case "trigger_parameters":
			err = unpopulate(val, &p.TriggerParameters)
			delete(rawMsg, key)
		case "updated_at":
			err = unpopulateTimeRFC3339(val, &p.UpdatedAt)
			delete(rawMsg, key)
		case "vcs":
			err = unpopulate(val, &p.Vcs)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsBc091TInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsBc091TInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metrics", p.Metrics)
	populate(objectMap, "name", p.Name)
	populateTimeRFC3339(objectMap, "window_end", p.WindowEnd)
	populateTimeRFC3339(objectMap, "window_start", p.WindowStart)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsBc091TInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsBc091TInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "metrics":
			err = unpopulate(val, &p.Metrics)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "window_end":
			err = unpopulateTimeRFC3339(val, &p.WindowEnd)
			delete(rawMsg, key)
		case "window_start":
			err = unpopulateTimeRFC3339(val, &p.WindowStart)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsBefzz0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsBefzz0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "errors", p.Errors)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "number", p.Number)
	populate(objectMap, "project_slug", p.ProjectSlug)
	populate(objectMap, "state", p.State)
	populate(objectMap, "trigger", p.Trigger)
	populate(objectMap, "trigger_parameters", p.TriggerParameters)
	populateTimeRFC3339(objectMap, "updated_at", p.UpdatedAt)
	populate(objectMap, "vcs", p.Vcs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsBefzz0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsBefzz0ProjectSlugPipelineGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, &p.Errors)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "number":
			err = unpopulate(val, &p.Number)
			delete(rawMsg, key)
		case "project_slug":
			err = unpopulate(val, &p.ProjectSlug)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		case "trigger":
			err = unpopulate(val, &p.Trigger)
			delete(rawMsg, key)
		case "trigger_parameters":
			err = unpopulate(val, &p.TriggerParameters)
			delete(rawMsg, key)
		case "updated_at":
			err = unpopulateTimeRFC3339(val, &p.UpdatedAt)
			delete(rawMsg, key)
		case "vcs":
			err = unpopulate(val, &p.Vcs)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsDipxqfProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsDipxqfProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "errors", p.Errors)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "number", p.Number)
	populate(objectMap, "project_slug", p.ProjectSlug)
	populate(objectMap, "state", p.State)
	populate(objectMap, "trigger", p.Trigger)
	populate(objectMap, "trigger_parameters", p.TriggerParameters)
	populateTimeRFC3339(objectMap, "updated_at", p.UpdatedAt)
	populate(objectMap, "vcs", p.Vcs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsDipxqfProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsDipxqfProjectSlugPipelineMineGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, &p.Errors)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "number":
			err = unpopulate(val, &p.Number)
			delete(rawMsg, key)
		case "project_slug":
			err = unpopulate(val, &p.ProjectSlug)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		case "trigger":
			err = unpopulate(val, &p.Trigger)
			delete(rawMsg, key)
		case "trigger_parameters":
			err = unpopulate(val, &p.TriggerParameters)
			delete(rawMsg, key)
		case "updated_at":
			err = unpopulateTimeRFC3339(val, &p.UpdatedAt)
			delete(rawMsg, key)
		case "vcs":
			err = unpopulate(val, &p.Vcs)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsDoiy03ProjectSlugCheckoutKeyGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsDoiy03ProjectSlugCheckoutKeyGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created-at", p.CreatedAt)
	populate(objectMap, "fingerprint", p.Fingerprint)
	populate(objectMap, "preferred", p.Preferred)
	populate(objectMap, "public-key", p.PublicKey)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsDoiy03ProjectSlugCheckoutKeyGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsDoiy03ProjectSlugCheckoutKeyGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created-at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "fingerprint":
			err = unpopulate(val, &p.Fingerprint)
			delete(rawMsg, key)
		case "preferred":
			err = unpopulate(val, &p.Preferred)
			delete(rawMsg, key)
		case "public-key":
			err = unpopulate(val, &p.PublicKey)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsE69Hh5PipelineIDWorkflowGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsE69Hh5PipelineIDWorkflowGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "canceled_by", p.CanceledBy)
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "errored_by", p.ErroredBy)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "pipeline_id", p.PipelineID)
	populate(objectMap, "pipeline_number", p.PipelineNumber)
	populate(objectMap, "project_slug", p.ProjectSlug)
	populate(objectMap, "started_by", p.StartedBy)
	populate(objectMap, "status", p.Status)
	populateTimeRFC3339(objectMap, "stopped_at", p.StoppedAt)
	populate(objectMap, "tag", p.Tag)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsE69Hh5PipelineIDWorkflowGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsE69Hh5PipelineIDWorkflowGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "canceled_by":
			err = unpopulate(val, &p.CanceledBy)
			delete(rawMsg, key)
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "errored_by":
			err = unpopulate(val, &p.ErroredBy)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "pipeline_id":
			err = unpopulate(val, &p.PipelineID)
			delete(rawMsg, key)
		case "pipeline_number":
			err = unpopulate(val, &p.PipelineNumber)
			delete(rawMsg, key)
		case "project_slug":
			err = unpopulate(val, &p.ProjectSlug)
			delete(rawMsg, key)
		case "started_by":
			err = unpopulate(val, &p.StartedBy)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "stopped_at":
			err = unpopulateTimeRFC3339(val, &p.StoppedAt)
			delete(rawMsg, key)
		case "tag":
			err = unpopulate(val, &p.Tag)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsEl56YsScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesTimetable.
func (p PathsEl56YsScheduleIDPatchResponses200ContentApplicationJSONSchemaPropertiesTimetable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "days-of-week", p.DaysOfWeek)
	populate(objectMap, "hours-of-day", p.HoursOfDay)
	populate(objectMap, "per-hour", p.PerHour)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsFqa3Z9InsightsProjectSlugFlakyTestsGetResponses200ContentApplicationJSONSchema.
func (p PathsFqa3Z9InsightsProjectSlugFlakyTestsGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "flaky-tests", p.FlakyTests)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsKc5Y5HInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsKc5Y5HInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metrics", p.Metrics)
	populate(objectMap, "name", p.Name)
	populateTimeRFC3339(objectMap, "window_end", p.WindowEnd)
	populateTimeRFC3339(objectMap, "window_start", p.WindowStart)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsKc5Y5HInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsKc5Y5HInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "metrics":
			err = unpopulate(val, &p.Metrics)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "window_end":
			err = unpopulateTimeRFC3339(val, &p.WindowEnd)
			delete(rawMsg, key)
		case "window_start":
			err = unpopulateTimeRFC3339(val, &p.WindowStart)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsOsf4AfInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsOsf4AfInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "max_ended_at", p.MaxEndedAt)
	populate(objectMap, "metrics", p.Metrics)
	populateTimeRFC3339(objectMap, "min_started_at", p.MinStartedAt)
	populate(objectMap, "name", p.Name)
	populateTimeRFC3339(objectMap, "timestamp", p.Timestamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsOsf4AfInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsOsf4AfInsightsTimeSeriesProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "max_ended_at":
			err = unpopulateTimeRFC3339(val, &p.MaxEndedAt)
			delete(rawMsg, key)
		case "metrics":
			err = unpopulate(val, &p.Metrics)
			delete(rawMsg, key)
		case "min_started_at":
			err = unpopulateTimeRFC3339(val, &p.MinStartedAt)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "timestamp":
			err = unpopulateTimeRFC3339(val, &p.Timestamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsOvr64LProjectSlugScheduleGetResponses200ContentApplicationJSONSchema.
func (p PathsOvr64LProjectSlugScheduleGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsRd9DcuInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchema.
func (p PathsRd9DcuInsightsProjectSlugWorkflowsWorkflowNameGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsSlfcapInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchema.
func (p PathsSlfcapInsightsProjectSlugWorkflowsWorkflowNameSummaryGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metrics", p.Metrics)
	populate(objectMap, "trends", p.Trends)
	populate(objectMap, "workflow_names", p.WorkflowNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsUxywyxInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchema.
func (p PathsUxywyxInsightsProjectSlugWorkflowsGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsX3FxmxInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchema.
func (p PathsX3FxmxInsightsProjectSlugWorkflowsWorkflowNameJobsJobNameGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsXikbsaContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p PathsXikbsaContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchemaPropertiesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "context_id", p.ContextID)
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "variable", p.Variable)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsXikbsaContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchemaPropertiesItems.
func (p *PathsXikbsaContextIDEnvironmentVariableGetResponses200ContentApplicationJSONSchemaPropertiesItems) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "context_id":
			err = unpopulate(val, &p.ContextID)
			delete(rawMsg, key)
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "variable":
			err = unpopulate(val, &p.Variable)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsXllw8WInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchema.
func (p PathsXllw8WInsightsProjectSlugWorkflowsWorkflowNameJobsGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsXxgky4ContextGetResponses200ContentApplicationJSONSchema.
func (p PathsXxgky4ContextGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PathsYqskbyContextIDEnvironmentVariableEnvVarNamePutResponses200ContentApplicationJSONSchemaAnyof0.
func (p PathsYqskbyContextIDEnvironmentVariableEnvVarNamePutResponses200ContentApplicationJSONSchemaAnyof0) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "context_id", p.ContextID)
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "variable", p.Variable)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PathsYqskbyContextIDEnvironmentVariableEnvVarNamePutResponses200ContentApplicationJSONSchemaAnyof0.
func (p *PathsYqskbyContextIDEnvironmentVariableEnvVarNamePutResponses200ContentApplicationJSONSchemaAnyof0) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "context_id":
			err = unpopulate(val, &p.ContextID)
			delete(rawMsg, key)
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "variable":
			err = unpopulate(val, &p.Variable)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PathsZsvny0InsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchema.
func (p PathsZsvny0InsightsPagesProjectSlugSummaryGetResponses200ContentApplicationJSONSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "all_branches", p.AllBranches)
	populate(objectMap, "all_workflows", p.AllWorkflows)
	populate(objectMap, "org_id", &p.OrgID)
	populate(objectMap, "project_data", p.ProjectData)
	populate(objectMap, "project_id", &p.ProjectID)
	populate(objectMap, "project_workflow_branch_data", p.ProjectWorkflowBranchData)
	populate(objectMap, "project_workflow_data", p.ProjectWorkflowData)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Pipeline.
func (p Pipeline) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "errors", p.Errors)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "number", p.Number)
	populate(objectMap, "project_slug", p.ProjectSlug)
	populate(objectMap, "state", p.State)
	populate(objectMap, "trigger", p.Trigger)
	populate(objectMap, "trigger_parameters", p.TriggerParameters)
	populateTimeRFC3339(objectMap, "updated_at", p.UpdatedAt)
	populate(objectMap, "vcs", p.Vcs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Pipeline.
func (p *Pipeline) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, &p.Errors)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "number":
			err = unpopulate(val, &p.Number)
			delete(rawMsg, key)
		case "project_slug":
			err = unpopulate(val, &p.ProjectSlug)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		case "trigger":
			err = unpopulate(val, &p.Trigger)
			delete(rawMsg, key)
		case "trigger_parameters":
			err = unpopulate(val, &p.TriggerParameters)
			delete(rawMsg, key)
		case "updated_at":
			err = unpopulateTimeRFC3339(val, &p.UpdatedAt)
			delete(rawMsg, key)
		case "vcs":
			err = unpopulate(val, &p.Vcs)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Pipeline0.
func (p Pipeline0) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "errors", p.Errors)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "number", p.Number)
	populate(objectMap, "project_slug", p.ProjectSlug)
	populate(objectMap, "state", p.State)
	populate(objectMap, "trigger", p.Trigger)
	populate(objectMap, "trigger_parameters", p.TriggerParameters)
	populateTimeRFC3339(objectMap, "updated_at", p.UpdatedAt)
	populate(objectMap, "vcs", p.Vcs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Pipeline0.
func (p *Pipeline0) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, &p.Errors)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "number":
			err = unpopulate(val, &p.Number)
			delete(rawMsg, key)
		case "project_slug":
			err = unpopulate(val, &p.ProjectSlug)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		case "trigger":
			err = unpopulate(val, &p.Trigger)
			delete(rawMsg, key)
		case "trigger_parameters":
			err = unpopulate(val, &p.TriggerParameters)
			delete(rawMsg, key)
		case "updated_at":
			err = unpopulateTimeRFC3339(val, &p.UpdatedAt)
			delete(rawMsg, key)
		case "vcs":
			err = unpopulate(val, &p.Vcs)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PipelineCreation.
func (p PipelineCreation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", p.CreatedAt)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "number", p.Number)
	populate(objectMap, "state", p.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PipelineCreation.
func (p *PipelineCreation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "number":
			err = unpopulate(val, &p.Number)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PipelineListResponse.
func (p PipelineListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PipelineListResponse0.
func (p PipelineListResponse0) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PipelineListResponse1.
func (p PipelineListResponse1) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", p.Items)
	populate(objectMap, "next_page_token", p.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PostContentSchemaTimetable.
func (p PostContentSchemaTimetable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "days-of-week", p.DaysOfWeek)
	populate(objectMap, "hours-of-day", p.HoursOfDay)
	populate(objectMap, "per-hour", p.PerHour)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RerunWorkflowParameters.
func (r RerunWorkflowParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enable_ssh", r.EnableSSH)
	populate(objectMap, "from_failed", r.FromFailed)
	populate(objectMap, "jobs", r.Jobs)
	populate(objectMap, "sparse_tree", r.SparseTree)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Schedule.
func (s Schedule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", s.Actor)
	populateTimeRFC3339(objectMap, "created-at", s.CreatedAt)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "parameters", s.Parameters)
	populate(objectMap, "project-slug", s.ProjectSlug)
	populate(objectMap, "timetable", s.Timetable)
	populateTimeRFC3339(objectMap, "updated-at", s.UpdatedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Schedule.
func (s *Schedule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &s.Actor)
			delete(rawMsg, key)
		case "created-at":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &s.Parameters)
			delete(rawMsg, key)
		case "project-slug":
			err = unpopulate(val, &s.ProjectSlug)
			delete(rawMsg, key)
		case "timetable":
			err = unpopulate(val, &s.Timetable)
			delete(rawMsg, key)
		case "updated-at":
			err = unpopulateTimeRFC3339(val, &s.UpdatedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Schedule0.
func (s Schedule0) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", s.Actor)
	populateTimeRFC3339(objectMap, "created-at", s.CreatedAt)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "parameters", s.Parameters)
	populate(objectMap, "project-slug", s.ProjectSlug)
	populate(objectMap, "timetable", s.Timetable)
	populateTimeRFC3339(objectMap, "updated-at", s.UpdatedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Schedule0.
func (s *Schedule0) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &s.Actor)
			delete(rawMsg, key)
		case "created-at":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &s.Parameters)
			delete(rawMsg, key)
		case "project-slug":
			err = unpopulate(val, &s.ProjectSlug)
			delete(rawMsg, key)
		case "timetable":
			err = unpopulate(val, &s.Timetable)
			delete(rawMsg, key)
		case "updated-at":
			err = unpopulateTimeRFC3339(val, &s.UpdatedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Schedule1.
func (s Schedule1) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actor", s.Actor)
	populateTimeRFC3339(objectMap, "created-at", s.CreatedAt)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "parameters", s.Parameters)
	populate(objectMap, "project-slug", s.ProjectSlug)
	populate(objectMap, "timetable", s.Timetable)
	populateTimeRFC3339(objectMap, "updated-at", s.UpdatedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Schedule1.
func (s *Schedule1) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actor":
			err = unpopulate(val, &s.Actor)
			delete(rawMsg, key)
		case "created-at":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &s.Parameters)
			delete(rawMsg, key)
		case "project-slug":
			err = unpopulate(val, &s.ProjectSlug)
			delete(rawMsg, key)
		case "timetable":
			err = unpopulate(val, &s.Timetable)
			delete(rawMsg, key)
		case "updated-at":
			err = unpopulateTimeRFC3339(val, &s.UpdatedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TestsResponse.
func (t TestsResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", t.Items)
	populate(objectMap, "next_page_token", t.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TriggerPipelineParameters.
func (t TriggerPipelineParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "branch", t.Branch)
	populate(objectMap, "parameters", t.Parameters)
	populate(objectMap, "tag", t.Tag)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UpdateScheduleParameters.
func (u UpdateScheduleParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "attribution-actor", u.AttributionActor)
	populate(objectMap, "description", u.Description)
	populate(objectMap, "name", u.Name)
	populate(objectMap, "parameters", u.Parameters)
	populate(objectMap, "timetable", u.Timetable)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Workflow.
func (w Workflow) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "canceled_by", w.CanceledBy)
	populateTimeRFC3339(objectMap, "created_at", w.CreatedAt)
	populate(objectMap, "errored_by", w.ErroredBy)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "pipeline_id", w.PipelineID)
	populate(objectMap, "pipeline_number", w.PipelineNumber)
	populate(objectMap, "project_slug", w.ProjectSlug)
	populate(objectMap, "started_by", w.StartedBy)
	populate(objectMap, "status", w.Status)
	populateTimeRFC3339(objectMap, "stopped_at", w.StoppedAt)
	populate(objectMap, "tag", w.Tag)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Workflow.
func (w *Workflow) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "canceled_by":
			err = unpopulate(val, &w.CanceledBy)
			delete(rawMsg, key)
		case "created_at":
			err = unpopulateTimeRFC3339(val, &w.CreatedAt)
			delete(rawMsg, key)
		case "errored_by":
			err = unpopulate(val, &w.ErroredBy)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &w.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &w.Name)
			delete(rawMsg, key)
		case "pipeline_id":
			err = unpopulate(val, &w.PipelineID)
			delete(rawMsg, key)
		case "pipeline_number":
			err = unpopulate(val, &w.PipelineNumber)
			delete(rawMsg, key)
		case "project_slug":
			err = unpopulate(val, &w.ProjectSlug)
			delete(rawMsg, key)
		case "started_by":
			err = unpopulate(val, &w.StartedBy)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &w.Status)
			delete(rawMsg, key)
		case "stopped_at":
			err = unpopulateTimeRFC3339(val, &w.StoppedAt)
			delete(rawMsg, key)
		case "tag":
			err = unpopulate(val, &w.Tag)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkflowJobListResponse.
func (w WorkflowJobListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", w.Items)
	populate(objectMap, "next_page_token", w.NextPageToken)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WorkflowListResponse.
func (w WorkflowListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", w.Items)
	populate(objectMap, "next_page_token", w.NextPageToken)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
