/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ContextOwner struct for ContextOwner
type ContextOwner struct {
	// The unique ID of the owner of the context. Specify either this or slug.
	Id *string `json:"id,omitempty"`
	// A string that represents an organization. Specify either this or id. Cannot be used for accounts.
	Slug *string `json:"slug,omitempty"`
	// The type of the owner. Defaults to \"organization\". Accounts are only used as context owners in server.
	Type *string `json:"type,omitempty"`
}

// NewContextOwner instantiates a new ContextOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextOwner() *ContextOwner {
	this := ContextOwner{}
	return &this
}

// NewContextOwnerWithDefaults instantiates a new ContextOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextOwnerWithDefaults() *ContextOwner {
	this := ContextOwner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContextOwner) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextOwner) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContextOwner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContextOwner) SetId(v string) {
	o.Id = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *ContextOwner) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextOwner) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *ContextOwner) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *ContextOwner) SetSlug(v string) {
	o.Slug = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ContextOwner) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextOwner) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ContextOwner) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ContextOwner) SetType(v string) {
	o.Type = &v
}

func (o ContextOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableContextOwner struct {
	value *ContextOwner
	isSet bool
}

func (v NullableContextOwner) Get() *ContextOwner {
	return v.value
}

func (v *NullableContextOwner) Set(val *ContextOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableContextOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableContextOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextOwner(val *ContextOwner) *NullableContextOwner {
	return &NullableContextOwner{value: val, isSet: true}
}

func (v NullableContextOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
