/*
CircleCI API

This describes the resources that make up the CircleCI API v2.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RerunWorkflowParameters The information you can supply when rerunning a workflow.
type RerunWorkflowParameters struct {
	// Whether to enable SSH access for the triggering user on the newly-rerun job. Requires the jobs parameter to be used and so is mutually exclusive with the from_failed parameter.
	EnableSsh *bool `json:"enable_ssh,omitempty"`
	// Whether to rerun the workflow from the failed job. Mutually exclusive with the jobs parameter.
	FromFailed *bool `json:"from_failed,omitempty"`
	// A list of job IDs to rerun.
	Jobs []string `json:"jobs,omitempty"`
	// Completes rerun using sparse trees logic, an optimization for workflows that have disconnected subgraphs. Requires jobs parameter and so is mutually exclusive with the from_failed parameter.
	SparseTree *bool `json:"sparse_tree,omitempty"`
}

// NewRerunWorkflowParameters instantiates a new RerunWorkflowParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRerunWorkflowParameters() *RerunWorkflowParameters {
	this := RerunWorkflowParameters{}
	return &this
}

// NewRerunWorkflowParametersWithDefaults instantiates a new RerunWorkflowParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRerunWorkflowParametersWithDefaults() *RerunWorkflowParameters {
	this := RerunWorkflowParameters{}
	return &this
}

// GetEnableSsh returns the EnableSsh field value if set, zero value otherwise.
func (o *RerunWorkflowParameters) GetEnableSsh() bool {
	if o == nil || o.EnableSsh == nil {
		var ret bool
		return ret
	}
	return *o.EnableSsh
}

// GetEnableSshOk returns a tuple with the EnableSsh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RerunWorkflowParameters) GetEnableSshOk() (*bool, bool) {
	if o == nil || o.EnableSsh == nil {
		return nil, false
	}
	return o.EnableSsh, true
}

// HasEnableSsh returns a boolean if a field has been set.
func (o *RerunWorkflowParameters) HasEnableSsh() bool {
	if o != nil && o.EnableSsh != nil {
		return true
	}

	return false
}

// SetEnableSsh gets a reference to the given bool and assigns it to the EnableSsh field.
func (o *RerunWorkflowParameters) SetEnableSsh(v bool) {
	o.EnableSsh = &v
}

// GetFromFailed returns the FromFailed field value if set, zero value otherwise.
func (o *RerunWorkflowParameters) GetFromFailed() bool {
	if o == nil || o.FromFailed == nil {
		var ret bool
		return ret
	}
	return *o.FromFailed
}

// GetFromFailedOk returns a tuple with the FromFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RerunWorkflowParameters) GetFromFailedOk() (*bool, bool) {
	if o == nil || o.FromFailed == nil {
		return nil, false
	}
	return o.FromFailed, true
}

// HasFromFailed returns a boolean if a field has been set.
func (o *RerunWorkflowParameters) HasFromFailed() bool {
	if o != nil && o.FromFailed != nil {
		return true
	}

	return false
}

// SetFromFailed gets a reference to the given bool and assigns it to the FromFailed field.
func (o *RerunWorkflowParameters) SetFromFailed(v bool) {
	o.FromFailed = &v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *RerunWorkflowParameters) GetJobs() []string {
	if o == nil || o.Jobs == nil {
		var ret []string
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RerunWorkflowParameters) GetJobsOk() ([]string, bool) {
	if o == nil || o.Jobs == nil {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *RerunWorkflowParameters) HasJobs() bool {
	if o != nil && o.Jobs != nil {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []string and assigns it to the Jobs field.
func (o *RerunWorkflowParameters) SetJobs(v []string) {
	o.Jobs = v
}

// GetSparseTree returns the SparseTree field value if set, zero value otherwise.
func (o *RerunWorkflowParameters) GetSparseTree() bool {
	if o == nil || o.SparseTree == nil {
		var ret bool
		return ret
	}
	return *o.SparseTree
}

// GetSparseTreeOk returns a tuple with the SparseTree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RerunWorkflowParameters) GetSparseTreeOk() (*bool, bool) {
	if o == nil || o.SparseTree == nil {
		return nil, false
	}
	return o.SparseTree, true
}

// HasSparseTree returns a boolean if a field has been set.
func (o *RerunWorkflowParameters) HasSparseTree() bool {
	if o != nil && o.SparseTree != nil {
		return true
	}

	return false
}

// SetSparseTree gets a reference to the given bool and assigns it to the SparseTree field.
func (o *RerunWorkflowParameters) SetSparseTree(v bool) {
	o.SparseTree = &v
}

func (o RerunWorkflowParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableSsh != nil {
		toSerialize["enable_ssh"] = o.EnableSsh
	}
	if o.FromFailed != nil {
		toSerialize["from_failed"] = o.FromFailed
	}
	if o.Jobs != nil {
		toSerialize["jobs"] = o.Jobs
	}
	if o.SparseTree != nil {
		toSerialize["sparse_tree"] = o.SparseTree
	}
	return json.Marshal(toSerialize)
}

type NullableRerunWorkflowParameters struct {
	value *RerunWorkflowParameters
	isSet bool
}

func (v NullableRerunWorkflowParameters) Get() *RerunWorkflowParameters {
	return v.value
}

func (v *NullableRerunWorkflowParameters) Set(val *RerunWorkflowParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableRerunWorkflowParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableRerunWorkflowParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRerunWorkflowParameters(val *RerunWorkflowParameters) *NullableRerunWorkflowParameters {
	return &NullableRerunWorkflowParameters{value: val, isSet: true}
}

func (v NullableRerunWorkflowParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRerunWorkflowParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
